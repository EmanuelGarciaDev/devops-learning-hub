{
  "id": "workflows",
  "toolId": "github-actions",
  "name": "CI/CD Workflows",
  "description": "Build advanced CI/CD pipelines with testing automation, deployment strategies, and production workflows",
  "difficulty": "intermediate",
  "definitions": {
    "beginner": "CI/CD workflows automate the process of building, testing, and deploying your applications. They ensure code quality through automated testing and enable consistent, reliable deployments to different environments.",
    "advanced": "CI/CD workflows orchestrate complex deployment pipelines with multi-stage testing, environment-specific configurations, deployment strategies (blue-green, canary), artifact management, and integration with external services for comprehensive software delivery automation."
  },
  "commands": [
    {
      "command": "gh workflow run",
      "description": "Trigger a workflow run manually",
      "example": "gh workflow run ci.yml --ref main",
      "flags": [
        {
          "flag": "--ref",
          "description": "Git reference to run workflow on",
          "example": "--ref feature/new-feature"
        },
        {
          "flag": "--input",
          "description": "Set workflow input parameter",
          "example": "--input environment=staging"
        },
        {
          "flag": "--json",
          "description": "Output in JSON format",
          "example": "--json"
        }
      ]
    },
    {
      "command": "actions/upload-artifact",
      "description": "Upload build artifacts for sharing between jobs",
      "example": "uses: actions/upload-artifact@v4",
      "flags": [
        {
          "flag": "with.name",
          "description": "Artifact name",
          "example": "name: build-artifacts"
        },
        {
          "flag": "with.path",
          "description": "Files or directories to upload",
          "example": "path: dist/"
        },
        {
          "flag": "with.retention-days",
          "description": "How long to keep artifacts",
          "example": "retention-days: 30"
        }
      ]
    },
    {
      "command": "actions/download-artifact",
      "description": "Download artifacts from previous jobs",
      "example": "uses: actions/download-artifact@v4",
      "flags": [
        {
          "flag": "with.name",
          "description": "Artifact name to download",
          "example": "name: build-artifacts"
        },
        {
          "flag": "with.path",
          "description": "Download destination path",
          "example": "path: ./artifacts"
        }
      ]
    },
    {
      "command": "actions/cache",
      "description": "Cache dependencies and build outputs",
      "example": "uses: actions/cache@v3",
      "flags": [
        {
          "flag": "with.path",
          "description": "Directories to cache",
          "example": "path: ~/.npm"
        },
        {
          "flag": "with.key",
          "description": "Cache key for identification",
          "example": "key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}"
        },
        {
          "flag": "with.restore-keys",
          "description": "Fallback cache keys",
          "example": "restore-keys: ${{ runner.os }}-npm-"
        }
      ]
    }
  ],
  "examples": [
    {
      "title": "Multi-Environment CI/CD Pipeline",
      "description": "Complete CI/CD pipeline with testing, building, and deployment to multiple environments",
      "code": "# Multi-Environment CI/CD Pipeline\n# .github/workflows/ci-cd-pipeline.yml\n\nname: üöÄ CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop, 'release/*']\n  pull_request:\n    branches: [main, develop]\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Target environment'\n        required: true\n        type: choice\n        options:\n          - development\n          - staging\n          - production\n      skip_tests:\n        description: 'Skip test execution'\n        type: boolean\n        default: false\n\nenv:\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  # Job 1: Detect Changes\n  changes:\n    name: üîç Detect Changes\n    runs-on: ubuntu-latest\n    outputs:\n      backend: ${{ steps.filter.outputs.backend }}\n      frontend: ${{ steps.filter.outputs.frontend }}\n      infrastructure: ${{ steps.filter.outputs.infrastructure }}\n      database: ${{ steps.filter.outputs.database }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Filter changes\n        uses: dorny/paths-filter@v2\n        id: filter\n        with:\n          filters: |\n            backend:\n              - 'backend/**'\n              - 'api/**'\n              - 'Dockerfile.backend'\n            frontend:\n              - 'frontend/**'\n              - 'web/**'\n              - 'Dockerfile.frontend'\n            infrastructure:\n              - 'terraform/**'\n              - 'k8s/**'\n              - 'helm/**'\n            database:\n              - 'migrations/**'\n              - 'seeds/**'\n              - 'database/**'\n\n  # Job 2: Backend CI\n  backend-ci:\n    name: üîß Backend CI\n    runs-on: ubuntu-latest\n    needs: changes\n    if: needs.changes.outputs.backend == 'true'\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          cache-dependency-path: backend/package-lock.json\n      \n      - name: Install dependencies\n        working-directory: backend\n        run: |\n          npm ci --prefer-offline\n          npm audit --audit-level high\n      \n      - name: Lint and format\n        working-directory: backend\n        run: |\n          npm run lint\n          npm run format:check\n      \n      - name: Type checking\n        working-directory: backend\n        run: npm run type-check\n      \n      - name: Run database migrations\n        working-directory: backend\n        run: npm run migrate:test\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n      \n      - name: Unit tests\n        working-directory: backend\n        run: npm run test:unit -- --coverage\n        env:\n          NODE_ENV: test\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n          REDIS_URL: redis://localhost:6379\n      \n      - name: Integration tests\n        working-directory: backend\n        run: npm run test:integration\n        env:\n          NODE_ENV: test\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n          REDIS_URL: redis://localhost:6379\n      \n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          file: backend/coverage/lcov.info\n          flags: backend\n      \n      - name: Build backend\n        working-directory: backend\n        run: npm run build\n      \n      - name: Upload backend artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: backend-build\n          path: |\n            backend/dist/\n            backend/package*.json\n          retention-days: 7\n\n  # Job 3: Frontend CI\n  frontend-ci:\n    name: üé® Frontend CI\n    runs-on: ubuntu-latest\n    needs: changes\n    if: needs.changes.outputs.frontend == 'true'\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          cache-dependency-path: frontend/package-lock.json\n      \n      - name: Install dependencies\n        working-directory: frontend\n        run: npm ci --prefer-offline\n      \n      - name: Lint and format\n        working-directory: frontend\n        run: |\n          npm run lint\n          npm run format:check\n      \n      - name: Type checking\n        working-directory: frontend\n        run: npm run type-check\n      \n      - name: Unit tests\n        working-directory: frontend\n        run: npm run test:unit -- --coverage --watchAll=false\n      \n      - name: Build frontend\n        working-directory: frontend\n        run: npm run build\n        env:\n          NODE_ENV: production\n          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}\n      \n      - name: E2E tests\n        working-directory: frontend\n        run: |\n          npm run build\n          npm run start &\n          sleep 10\n          npm run test:e2e\n        env:\n          CI: true\n      \n      - name: Upload frontend artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: frontend-build\n          path: |\n            frontend/.next/\n            frontend/out/\n          retention-days: 7\n      \n      - name: Upload E2E artifacts\n        uses: actions/upload-artifact@v4\n        if: failure()\n        with:\n          name: e2e-artifacts\n          path: |\n            frontend/cypress/screenshots/\n            frontend/cypress/videos/\n          retention-days: 3\n\n  # Job 4: Database Migration Check\n  database-check:\n    name: üóÑÔ∏è Database Migration Check\n    runs-on: ubuntu-latest\n    needs: changes\n    if: needs.changes.outputs.database == 'true'\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: migration_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n      \n      - name: Install migration tools\n        run: |\n          npm install -g db-migrate\n          npm install -g pg\n      \n      - name: Test migrations\n        run: |\n          cd database\n          # Run forward migrations\n          db-migrate up --config database.json --env test\n          # Test rollback\n          db-migrate down --config database.json --env test --count 1\n          # Run forward again\n          db-migrate up --config database.json --env test\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test\n      \n      - name: Validate schema\n        run: |\n          cd database\n          npm run validate-schema\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test\n\n  # Job 5: Security Scanning\n  security:\n    name: üîí Security Scanning\n    runs-on: ubuntu-latest\n    needs: [backend-ci, frontend-ci]\n    if: always() && (needs.backend-ci.result == 'success' || needs.frontend-ci.result == 'success')\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      \n      - name: Run CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n        with:\n          languages: javascript,typescript\n      \n      - name: Run Snyk Security Scan\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high\n      \n      - name: OWASP Dependency Check\n        uses: dependency-check/Dependency-Check_Action@main\n        with:\n          project: 'devops-learning-hub'\n          path: '.'\n          format: 'ALL'\n      \n      - name: Upload security results\n        uses: actions/upload-artifact@v4\n        with:\n          name: security-reports\n          path: |\n            reports/\n            *.sarif\n          retention-days: 30\n\n  # Job 6: Build Docker Images\n  build-images:\n    name: üê≥ Build Docker Images\n    runs-on: ubuntu-latest\n    needs: [backend-ci, frontend-ci]\n    if: github.event_name != 'pull_request'\n    outputs:\n      backend-image: ${{ steps.backend-meta.outputs.tags }}\n      frontend-image: ${{ steps.frontend-meta.outputs.tags }}\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Log in to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Download backend artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: backend-build\n          path: ./backend-artifacts\n      \n      - name: Download frontend artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: frontend-build\n          path: ./frontend-artifacts\n      \n      - name: Extract backend metadata\n        id: backend-meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n      \n      - name: Extract frontend metadata\n        id: frontend-meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n      \n      - name: Build and push backend image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: ./Dockerfile.backend\n          push: true\n          tags: ${{ steps.backend-meta.outputs.tags }}\n          labels: ${{ steps.backend-meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          build-args: |\n            BUILD_DATE=${{ github.event.head_commit.timestamp }}\n            VCS_REF=${{ github.sha }}\n      \n      - name: Build and push frontend image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          file: ./Dockerfile.frontend\n          push: true\n          tags: ${{ steps.frontend-meta.outputs.tags }}\n          labels: ${{ steps.frontend-meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          build-args: |\n            BUILD_DATE=${{ github.event.head_commit.timestamp }}\n            VCS_REF=${{ github.sha }}\n\n  # Job 7: Deploy to Development\n  deploy-dev:\n    name: üöÄ Deploy to Development\n    runs-on: ubuntu-latest\n    needs: [build-images]\n    if: github.ref == 'refs/heads/develop'\n    environment:\n      name: development\n      url: https://dev.example.com\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: 'v1.28.0'\n      \n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n      \n      - name: Update kubeconfig\n        run: |\n          aws eks update-kubeconfig --region us-east-1 --name dev-cluster\n      \n      - name: Deploy to Kubernetes\n        run: |\n          envsubst < k8s/development/deployment.yaml | kubectl apply -f -\n          kubectl rollout status deployment/app-backend -n development\n          kubectl rollout status deployment/app-frontend -n development\n        env:\n          BACKEND_IMAGE: ${{ needs.build-images.outputs.backend-image }}\n          FRONTEND_IMAGE: ${{ needs.build-images.outputs.frontend-image }}\n      \n      - name: Run smoke tests\n        run: |\n          sleep 30  # Wait for deployment\n          curl -f https://dev.example.com/health || exit 1\n          npm run test:smoke:dev\n      \n      - name: Notify team\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: '#deployments'\n          message: |\n            üöÄ Development deployment completed!\n            Branch: ${{ github.ref_name }}\n            Commit: ${{ github.sha }}\n            URL: https://dev.example.com\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n        if: always()\n\n  # Job 8: Deploy to Staging\n  deploy-staging:\n    name: üé≠ Deploy to Staging\n    runs-on: ubuntu-latest\n    needs: [build-images, security]\n    if: github.ref == 'refs/heads/main' || inputs.environment == 'staging'\n    environment:\n      name: staging\n      url: https://staging.example.com\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Deploy with Helm\n        run: |\n          helm upgrade --install app-staging ./helm/app \\\n            --namespace staging \\\n            --set backend.image=${{ needs.build-images.outputs.backend-image }} \\\n            --set frontend.image=${{ needs.build-images.outputs.frontend-image }} \\\n            --set ingress.hostname=staging.example.com \\\n            --wait --timeout=10m\n      \n      - name: Run full test suite\n        run: |\n          npm run test:integration:staging\n          npm run test:performance:staging\n      \n      - name: Generate test report\n        uses: actions/upload-artifact@v4\n        with:\n          name: staging-test-report\n          path: |\n            test-results/\n            performance-results/\n          retention-days: 14\n\n  # Job 9: Deploy to Production\n  deploy-production:\n    name: üåü Deploy to Production\n    runs-on: ubuntu-latest\n    needs: [build-images, security, deploy-staging]\n    if: inputs.environment == 'production'\n    environment:\n      name: production\n      url: https://example.com\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Blue-Green Deployment\n        run: |\n          # Deploy to green environment\n          helm upgrade --install app-green ./helm/app \\\n            --namespace production \\\n            --set backend.image=${{ needs.build-images.outputs.backend-image }} \\\n            --set frontend.image=${{ needs.build-images.outputs.frontend-image }} \\\n            --set ingress.hostname=green.example.com \\\n            --wait --timeout=15m\n          \n          # Run production validation\n          npm run test:production:validation\n          \n          # Switch traffic to green\n          kubectl patch service app-service -n production \\\n            -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'\n          \n          # Wait and verify\n          sleep 60\n          curl -f https://example.com/health\n          \n          # Remove blue environment\n          helm uninstall app-blue --namespace production || true\n      \n      - name: Create release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: v${{ github.run_number }}\n          release_name: Production Release v${{ github.run_number }}\n          body: |\n            üöÄ Production deployment completed successfully!\n            \n            **Deployed Images:**\n            - Backend: ${{ needs.build-images.outputs.backend-image }}\n            - Frontend: ${{ needs.build-images.outputs.frontend-image }}\n            \n            **Commit:** ${{ github.sha }}\n            **Workflow:** ${{ github.run_id }}\n      \n      - name: Notify stakeholders\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: '#production'\n          message: |\n            üåü PRODUCTION DEPLOYMENT SUCCESSFUL! üåü\n            \n            Release: v${{ github.run_number }}\n            URL: https://example.com\n            Deployment time: ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }}\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n        if: always()",
      "language": "yaml",
      "scenario": "Enterprise-grade multi-environment CI/CD pipeline with comprehensive testing and deployment strategies"
    },
    {
      "title": "Advanced Testing and Quality Gates",
      "description": "Comprehensive testing strategy with quality gates, parallel execution, and detailed reporting",
      "code": "# Advanced Testing and Quality Gates\n# .github/workflows/quality-gates.yml\n\nname: üß™ Quality Gates & Testing\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 2 * * *'  # Daily quality check\n\nenv:\n  NODE_VERSION: '18'\n  COVERAGE_THRESHOLD: 80\n  PERFORMANCE_BUDGET: 2000  # milliseconds\n\njobs:\n  # Job 1: Code Quality Analysis\n  code-quality:\n    name: üìä Code Quality Analysis\n    runs-on: ubuntu-latest\n    outputs:\n      quality-gate: ${{ steps.quality-check.outputs.passed }}\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: ESLint Analysis\n        run: |\n          npm run lint -- --format json --output-file eslint-report.json\n          npm run lint -- --format unix\n        continue-on-error: true\n      \n      - name: Prettier Check\n        run: npm run format:check\n      \n      - name: TypeScript Type Check\n        run: npm run type-check\n      \n      - name: Complexity Analysis\n        run: |\n          npx complexity-report --format json --output complexity-report.json src/\n          npx complexity-report src/\n      \n      - name: Dependency Analysis\n        run: |\n          npm audit --json > audit-report.json\n          npm audit\n          npx license-checker --json > license-report.json\n      \n      - name: Code Duplication Check\n        run: |\n          npx jscpd --reporters json --output ./reports src/\n          npx jscpd src/\n      \n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      \n      - name: Quality Gate Check\n        id: quality-check\n        run: |\n          # Check if quality gate passed\n          QUALITY_GATE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \\\n            \"https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ vars.SONAR_PROJECT_KEY }}\" \\\n            | jq -r '.projectStatus.status')\n          \n          echo \"Quality Gate Status: $QUALITY_GATE\"\n          \n          if [ \"$QUALITY_GATE\" = \"OK\" ]; then\n            echo \"passed=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"passed=false\" >> $GITHUB_OUTPUT\n            exit 1\n          fi\n      \n      - name: Upload quality reports\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: quality-reports\n          path: |\n            eslint-report.json\n            complexity-report.json\n            audit-report.json\n            license-report.json\n            reports/\n          retention-days: 30\n\n  # Job 2: Unit Tests with Coverage\n  unit-tests:\n    name: üî¨ Unit Tests\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: ['16', '18', '20']\n        test-group: ['core', 'utils', 'components', 'services']\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run unit tests\n        run: |\n          npm run test:unit:${{ matrix.test-group }} -- \\\n            --coverage \\\n            --coverageReporters=lcov \\\n            --coverageReporters=json \\\n            --coverageReporters=text \\\n            --coverageDirectory=coverage/${{ matrix.test-group }} \\\n            --testResultsProcessor=jest-sonar-reporter\n        env:\n          NODE_ENV: test\n          CI: true\n      \n      - name: Coverage threshold check\n        run: |\n          COVERAGE=$(node -p \"require('./coverage/${{ matrix.test-group }}/coverage-summary.json').total.lines.pct\")\n          echo \"Coverage for ${{ matrix.test-group }}: ${COVERAGE}%\"\n          \n          if (( $(echo \"$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}\" | bc -l) )); then\n            echo \"‚ùå Coverage ${COVERAGE}% is below threshold ${{ env.COVERAGE_THRESHOLD }}%\"\n            exit 1\n          else\n            echo \"‚úÖ Coverage ${COVERAGE}% meets threshold ${{ env.COVERAGE_THRESHOLD }}%\"\n          fi\n      \n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          file: coverage/${{ matrix.test-group }}/lcov.info\n          flags: unit,${{ matrix.test-group }},node${{ matrix.node-version }}\n          name: unit-${{ matrix.test-group }}-node${{ matrix.node-version }}\n      \n      - name: Upload test results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: unit-test-results-${{ matrix.test-group }}-node${{ matrix.node-version }}\n          path: |\n            coverage/${{ matrix.test-group }}/\n            test-report.xml\n            junit.xml\n          retention-days: 7\n\n  # Job 3: Integration Tests\n  integration-tests:\n    name: üîó Integration Tests\n    runs-on: ubuntu-latest\n    needs: code-quality\n    if: needs.code-quality.outputs.quality-gate == 'true'\n    \n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n      \n      elasticsearch:\n        image: elasticsearch:8.8.0\n        env:\n          discovery.type: single-node\n          xpack.security.enabled: false\n        options: >-\n          --health-cmd \"curl -f http://localhost:9200/_cluster/health\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 10\n        ports:\n          - 9200:9200\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Wait for services\n        run: |\n          echo \"Waiting for PostgreSQL...\"\n          timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'\n          \n          echo \"Waiting for Redis...\"\n          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'\n          \n          echo \"Waiting for Elasticsearch...\"\n          timeout 60 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'\n      \n      - name: Setup test database\n        run: |\n          npm run db:migrate:test\n          npm run db:seed:test\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n      \n      - name: Run API integration tests\n        run: npm run test:integration:api\n        env:\n          NODE_ENV: test\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n          REDIS_URL: redis://localhost:6379\n          ELASTICSEARCH_URL: http://localhost:9200\n      \n      - name: Run database integration tests\n        run: npm run test:integration:database\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n      \n      - name: Run external service integration tests\n        run: npm run test:integration:external\n        env:\n          NODE_ENV: test\n          REDIS_URL: redis://localhost:6379\n          ELASTICSEARCH_URL: http://localhost:9200\n      \n      - name: Generate integration test report\n        run: |\n          npm run test:report:integration\n          npm run test:report:coverage:merge\n      \n      - name: Upload integration test results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: integration-test-results\n          path: |\n            test-results/integration/\n            coverage/integration/\n          retention-days: 14\n\n  # Job 4: End-to-End Tests\n  e2e-tests:\n    name: üé≠ E2E Tests\n    runs-on: ubuntu-latest\n    needs: [unit-tests, integration-tests]\n    strategy:\n      matrix:\n        browser: [chrome, firefox, safari]\n        viewport: [desktop, tablet, mobile]\n        exclude:\n          - browser: safari\n            viewport: mobile  # Skip mobile Safari for now\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Build application\n        run: npm run build\n        env:\n          NODE_ENV: production\n      \n      - name: Start application\n        run: |\n          npm start &\n          sleep 10\n          curl -f http://localhost:3000/health\n        env:\n          NODE_ENV: production\n          PORT: 3000\n      \n      - name: Install Playwright browsers\n        run: npx playwright install --with-deps ${{ matrix.browser }}\n      \n      - name: Run E2E tests\n        run: |\n          npx playwright test \\\n            --project=${{ matrix.browser }} \\\n            --grep=\"@${{ matrix.viewport }}\" \\\n            --reporter=html,junit \\\n            --output-dir=test-results/e2e/${{ matrix.browser }}-${{ matrix.viewport }}\n        env:\n          BASE_URL: http://localhost:3000\n          CI: true\n      \n      - name: Performance tests\n        if: matrix.browser == 'chrome' && matrix.viewport == 'desktop'\n        run: |\n          npm run test:performance\n          npm run lighthouse:ci\n        env:\n          PERFORMANCE_BUDGET: ${{ env.PERFORMANCE_BUDGET }}\n      \n      - name: Upload E2E results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: e2e-results-${{ matrix.browser }}-${{ matrix.viewport }}\n          path: |\n            test-results/e2e/${{ matrix.browser }}-${{ matrix.viewport }}/\n            playwright-report/\n            lighthouse-report/\n          retention-days: 14\n      \n      - name: Upload screenshots and videos\n        uses: actions/upload-artifact@v4\n        if: failure()\n        with:\n          name: e2e-artifacts-${{ matrix.browser }}-${{ matrix.viewport }}\n          path: |\n            test-results/e2e/${{ matrix.browser }}-${{ matrix.viewport }}/screenshots/\n            test-results/e2e/${{ matrix.browser }}-${{ matrix.viewport }}/videos/\n          retention-days: 7\n\n  # Job 5: Load Testing\n  load-tests:\n    name: ‚ö° Load Testing\n    runs-on: ubuntu-latest\n    needs: e2e-tests\n    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n      \n      - name: Install k6\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y gpg\n          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k6.gpg\n          echo \"deb https://dl.k6.io/deb stable main\" | sudo tee /etc/apt/sources.list.d/k6.list\n          sudo apt-get update\n          sudo apt-get install -y k6\n      \n      - name: Run load tests\n        run: |\n          k6 run --out json=load-test-results.json tests/load/api-load-test.js\n          k6 run --out json=stress-test-results.json tests/load/stress-test.js\n          k6 run --out json=spike-test-results.json tests/load/spike-test.js\n        env:\n          BASE_URL: https://staging.example.com\n      \n      - name: Analyze load test results\n        run: |\n          node scripts/analyze-load-tests.js\n          npm run report:load-tests\n      \n      - name: Upload load test results\n        uses: actions/upload-artifact@v4\n        with:\n          name: load-test-results\n          path: |\n            *-test-results.json\n            load-test-report.html\n            performance-analysis.json\n          retention-days: 30\n\n  # Job 6: Security Testing\n  security-tests:\n    name: üîí Security Testing\n    runs-on: ubuntu-latest\n    needs: integration-tests\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: OWASP ZAP Baseline Scan\n        uses: zaproxy/action-baseline@v0.10.0\n        with:\n          target: 'https://staging.example.com'\n          rules_file_name: '.zap/rules.tsv'\n          cmd_options: '-a'\n      \n      - name: OWASP ZAP Full Scan\n        uses: zaproxy/action-full-scan@v0.8.0\n        with:\n          target: 'https://staging.example.com'\n          rules_file_name: '.zap/rules.tsv'\n          cmd_options: '-a'\n      \n      - name: Upload ZAP results\n        uses: actions/upload-artifact@v4\n        with:\n          name: zap-reports\n          path: |\n            report_html.html\n            report_json.json\n          retention-days: 30\n\n  # Job 7: Test Results Summary\n  test-summary:\n    name: üìã Test Results Summary\n    runs-on: ubuntu-latest\n    needs: [code-quality, unit-tests, integration-tests, e2e-tests, security-tests]\n    if: always()\n    \n    steps:\n      - name: Download all test artifacts\n        uses: actions/download-artifact@v4\n        with:\n          path: ./test-artifacts\n      \n      - name: Generate test summary\n        run: |\n          echo \"# üß™ Test Results Summary\" > test-summary.md\n          echo \"\" >> test-summary.md\n          echo \"## Quality Gate: ${{ needs.code-quality.outputs.quality-gate == 'true' && '‚úÖ PASSED' || '‚ùå FAILED' }}\" >> test-summary.md\n          echo \"\" >> test-summary.md\n          echo \"| Test Type | Status | Coverage |\" >> test-summary.md\n          echo \"|-----------|--------|----------|\" >> test-summary.md\n          echo \"| Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ' || '‚ùå' }} | - |\" >> test-summary.md\n          echo \"| Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ' || '‚ùå' }} | 85% |\" >> test-summary.md\n          echo \"| Integration Tests | ${{ needs.integration-tests.result == 'success' && '‚úÖ' || '‚ùå' }} | 78% |\" >> test-summary.md\n          echo \"| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ' || '‚ùå' }} | - |\" >> test-summary.md\n          echo \"| Security Tests | ${{ needs.security-tests.result == 'success' && '‚úÖ' || '‚ùå' }} | - |\" >> test-summary.md\n          \n          cat test-summary.md\n      \n      - name: Comment PR with results\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const fs = require('fs');\n            const summary = fs.readFileSync('test-summary.md', 'utf8');\n            \n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: summary\n            });\n      \n      - name: Upload test summary\n        uses: actions/upload-artifact@v4\n        with:\n          name: test-summary\n          path: test-summary.md\n          retention-days: 30",
      "language": "yaml",
      "scenario": "Comprehensive testing strategy with quality gates, parallel execution, and detailed reporting across multiple test types"
    }
  ],
  "troubleshooting": [
    {
      "problem": "Workflow runs out of disk space during build",
      "solution": "Clean up unnecessary files and use multi-stage Docker builds to reduce artifact size",
      "commands": ["docker system prune", "rm -rf node_modules/.cache", "npm ci --prefer-offline"],
      "details": "Monitor disk usage and implement cleanup steps between jobs; use caching strategically"
    },
    {
      "problem": "Tests failing intermittently in CI but passing locally",
      "solution": "Add retry logic, increase timeouts, and ensure proper test isolation",
      "commands": ["npm run test -- --maxWorkers=1", "jest --runInBand", "cypress run --browser chrome --headless"],
      "details": "CI environments may have different performance characteristics; adjust test configurations accordingly"
    },
    {
      "problem": "Docker build failing with memory errors",
      "solution": "Increase runner memory or optimize Docker build process with multi-stage builds",
      "commands": ["docker build --memory=4g", "docker build --no-cache", "docker system df"],
      "details": "Use larger GitHub runners or optimize Dockerfile for memory efficiency"
    },
    {
      "problem": "Deployment job hanging or timing out",
      "solution": "Implement proper health checks and timeout configurations",
      "commands": ["kubectl rollout status --timeout=600s", "curl --max-time 30", "timeout 300"],
      "details": "Add explicit timeouts and health checks; implement proper rollback strategies"
    },
    {
      "problem": "Parallel jobs consuming too many runner minutes",
      "solution": "Optimize job dependencies and use conditional execution to run only necessary jobs",
      "commands": ["if: needs.changes.outputs.backend == 'true'", "strategy.fail-fast: false"],
      "details": "Use path filtering and smart job dependencies to avoid unnecessary work"
    }
  ],
  "tags": ["ci-cd", "workflows", "testing", "deployment", "automation", "quality-gates", "docker", "kubernetes"]
}
