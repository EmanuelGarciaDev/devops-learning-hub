{
  "id": "actions-fundamentals",
  "toolId": "github-actions",
  "name": "GitHub Actions Fundamentals",
  "description": "Master GitHub Actions basics including workflows, events, jobs, and steps for automated CI/CD",
  "difficulty": "beginner",
  "definitions": {
    "beginner": "GitHub Actions is a CI/CD platform that automates software workflows directly in your GitHub repository. It allows you to build, test, and deploy your code automatically when certain events occur, like pushing code or creating pull requests.",
    "advanced": "GitHub Actions is a comprehensive automation platform providing event-driven workflows with YAML-based configuration. It features a distributed runner architecture, extensive marketplace ecosystem, matrix build strategies, and integration with GitHub's security and deployment features for enterprise-grade CI/CD pipelines."
  },
  "commands": [
    {
      "command": "gh workflow",
      "description": "GitHub CLI workflow management",
      "example": "gh workflow list",
      "flags": [
        {
          "flag": "list",
          "description": "List workflows in repository",
          "example": "list"
        },
        {
          "flag": "run",
          "description": "Trigger workflow run",
          "example": "run workflow.yml"
        },
        {
          "flag": "view",
          "description": "View workflow details",
          "example": "view workflow.yml"
        }
      ]
    },
    {
      "command": "gh run",
      "description": "GitHub CLI workflow run management",
      "example": "gh run list",
      "flags": [
        {
          "flag": "list",
          "description": "List workflow runs",
          "example": "list --workflow=ci.yml"
        },
        {
          "flag": "view",
          "description": "View run details",
          "example": "view 123456"
        },
        {
          "flag": "watch",
          "description": "Watch run in real-time",
          "example": "watch 123456"
        }
      ]
    },
    {
      "command": "actions/checkout",
      "description": "Checkout repository code in workflow",
      "example": "uses: actions/checkout@v4",
      "flags": [
        {
          "flag": "with.ref",
          "description": "Git reference to checkout",
          "example": "ref: main"
        },
        {
          "flag": "with.token",
          "description": "GitHub token for authentication",
          "example": "token: ${{ secrets.GITHUB_TOKEN }}"
        },
        {
          "flag": "with.fetch-depth",
          "description": "Number of commits to fetch",
          "example": "fetch-depth: 0"
        }
      ]
    },
    {
      "command": "actions/setup-node",
      "description": "Set up Node.js environment",
      "example": "uses: actions/setup-node@v4",
      "flags": [
        {
          "flag": "with.node-version",
          "description": "Node.js version to use",
          "example": "node-version: '18'"
        },
        {
          "flag": "with.cache",
          "description": "Enable dependency caching",
          "example": "cache: 'npm'"
        },
        {
          "flag": "with.registry-url",
          "description": "Registry URL for publishing",
          "example": "registry-url: 'https://registry.npmjs.org'"
        }
      ]
    }
  ],
  "examples": [
    {
      "title": "Complete CI/CD Workflow Setup",
      "description": "Comprehensive GitHub Actions workflow for Node.js application with testing, building, and deployment",
      "code": "# Complete CI/CD Workflow for Node.js Application\n# .github/workflows/ci-cd.yml\n\nname: CI/CD Pipeline\n\n# Workflow triggers\non:\n  # Trigger on push to main and develop branches\n  push:\n    branches: [ main, develop ]\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n  \n  # Trigger on pull requests to main\n  pull_request:\n    branches: [ main ]\n    types: [opened, synchronize, reopened]\n  \n  # Manual trigger with inputs\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Deployment environment'\n        required: true\n        default: 'staging'\n        type: choice\n        options:\n          - staging\n          - production\n      skip_tests:\n        description: 'Skip test execution'\n        required: false\n        type: boolean\n        default: false\n  \n  # Scheduled runs (daily at 2 AM UTC)\n  schedule:\n    - cron: '0 2 * * *'\n\n# Global environment variables\nenv:\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\n# Workflow permissions\npermissions:\n  contents: read\n  packages: write\n  security-events: write\n  actions: read\n\njobs:\n  # Job 1: Code Quality and Security\n  quality-check:\n    name: Code Quality & Security\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # Full history for SonarCloud\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n          cache-dependency-path: package-lock.json\n      \n      - name: Install dependencies\n        run: |\n          npm ci --prefer-offline --no-audit\n          npm list --depth=0\n      \n      - name: Lint code\n        run: |\n          npm run lint\n          npm run lint:format\n      \n      - name: Type checking\n        run: npm run type-check\n        if: hashFiles('tsconfig.json') != ''\n      \n      - name: Security audit\n        run: |\n          npm audit --audit-level moderate\n          npx audit-ci --moderate\n      \n      - name: License compliance check\n        run: npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'\n      \n      - name: Dependency vulnerability scan\n        uses: github/dependency-review-action@v3\n        if: github.event_name == 'pull_request'\n\n  # Job 2: Automated Testing\n  test:\n    name: Test Suite\n    runs-on: ubuntu-latest\n    needs: quality-check\n    if: ${{ !inputs.skip_tests }}\n    \n    strategy:\n      matrix:\n        node-version: ['16', '18', '20']\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        include:\n          - node-version: '18'\n            os: ubuntu-latest\n            coverage: true\n    \n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run unit tests\n        run: |\n          npm run test:unit -- --coverage=${{ matrix.coverage && 'true' || 'false' }}\n        env:\n          NODE_ENV: test\n          CI: true\n      \n      - name: Run integration tests\n        run: npm run test:integration\n        env:\n          NODE_ENV: test\n          DATABASE_URL: postgresql://test:test@localhost:5432/test_db\n      \n      - name: Upload coverage reports\n        if: matrix.coverage\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n          flags: unittests\n          name: codecov-umbrella\n          fail_ci_if_error: true\n      \n      - name: Upload test results\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: test-results-${{ matrix.node-version }}-${{ matrix.os }}\n          path: |\n            test-results.xml\n            coverage/\n          retention-days: 7\n\n  # Job 3: Build and Package\n  build:\n    name: Build Application\n    runs-on: ubuntu-latest\n    needs: [quality-check, test]\n    outputs:\n      version: ${{ steps.version.outputs.version }}\n      image-digest: ${{ steps.build.outputs.digest }}\n    \n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci --production\n      \n      - name: Generate version\n        id: version\n        run: |\n          if [[ \"${{ github.ref }}\" == \"refs/heads/main\" ]]; then\n            VERSION=$(npm version --no-git-tag-version patch)\n          else\n            VERSION=$(npm version --no-git-tag-version prerelease --preid=dev)\n          fi\n          echo \"version=${VERSION}\" >> $GITHUB_OUTPUT\n          echo \"Generated version: ${VERSION}\"\n      \n      - name: Build application\n        run: |\n          npm run build\n          npm run build:docs\n        env:\n          NODE_ENV: production\n          VERSION: ${{ steps.version.outputs.version }}\n      \n      - name: Create deployment package\n        run: |\n          mkdir -p dist\n          tar -czf dist/app-${{ steps.version.outputs.version }}.tar.gz \\\n            --exclude='node_modules' \\\n            --exclude='.git' \\\n            --exclude='coverage' \\\n            --exclude='*.log' \\\n            .\n      \n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-artifacts\n          path: |\n            dist/\n            build/\n            package.json\n            package-lock.json\n          retention-days: 30\n      \n      - name: Log in to Container Registry\n        if: github.event_name != 'pull_request'\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}\n            type=raw,value=latest,enable={{is_default_branch}}\n      \n      - name: Build and push Docker image\n        id: build\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          build-args: |\n            VERSION=${{ steps.version.outputs.version }}\n            BUILD_DATE=${{ github.event.head_commit.timestamp }}\n            VCS_REF=${{ github.sha }}\n\n  # Job 4: Security Scanning\n  security:\n    name: Security Scanning\n    runs-on: ubuntu-latest\n    needs: build\n    if: github.event_name != 'pull_request'\n    \n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n      \n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n      \n      - name: Upload Trivy scan results\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: 'trivy-results.sarif'\n      \n      - name: CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n        with:\n          languages: javascript\n\n  # Job 5: Deploy to Staging\n  deploy-staging:\n    name: Deploy to Staging\n    runs-on: ubuntu-latest\n    needs: [build, security]\n    if: github.ref == 'refs/heads/develop' || inputs.environment == 'staging'\n    environment:\n      name: staging\n      url: https://staging.example.com\n    \n    steps:\n      - name: Download build artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: build-artifacts\n          path: ./artifacts\n      \n      - name: Deploy to staging\n        run: |\n          echo \"Deploying version ${{ needs.build.outputs.version }} to staging\"\n          # Deployment script would go here\n          echo \"Deployment completed successfully\"\n      \n      - name: Run smoke tests\n        run: |\n          npm install -g newman\n          newman run tests/postman/staging-smoke-tests.json \\\n            --environment tests/postman/staging.env.json \\\n            --reporters cli,junit \\\n            --reporter-junit-export smoke-test-results.xml\n      \n      - name: Upload smoke test results\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: smoke-test-results\n          path: smoke-test-results.xml\n\n  # Job 6: Deploy to Production\n  deploy-production:\n    name: Deploy to Production\n    runs-on: ubuntu-latest\n    needs: [build, security]\n    if: github.ref == 'refs/heads/main' || inputs.environment == 'production'\n    environment:\n      name: production\n      url: https://example.com\n    \n    steps:\n      - name: Download build artifacts\n        uses: actions/download-artifact@v3\n        with:\n          name: build-artifacts\n          path: ./artifacts\n      \n      - name: Create GitHub Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ needs.build.outputs.version }}\n          release_name: Release ${{ needs.build.outputs.version }}\n          body: |\n            ## Changes in this Release\n            - Automated release from commit ${{ github.sha }}\n            - Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}\n            \n            ## Deployment Information\n            - Build ID: ${{ github.run_id }}\n            - Commit: ${{ github.sha }}\n            - Actor: ${{ github.actor }}\n          draft: false\n          prerelease: false\n      \n      - name: Deploy to production\n        run: |\n          echo \"Deploying version ${{ needs.build.outputs.version }} to production\"\n          # Production deployment script\n          echo \"Production deployment completed successfully\"\n      \n      - name: Notify deployment\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: '#deployments'\n          message: |\n            🚀 Production deployment completed!\n            Version: ${{ needs.build.outputs.version }}\n            Commit: ${{ github.sha }}\n            Actor: ${{ github.actor }}\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n        if: always()\n\n  # Job 7: Cleanup\n  cleanup:\n    name: Cleanup\n    runs-on: ubuntu-latest\n    needs: [deploy-staging, deploy-production]\n    if: always()\n    \n    steps:\n      - name: Clean up old artifacts\n        run: |\n          echo \"Cleaning up old build artifacts and cache\"\n          # Cleanup logic would go here\n      \n      - name: Update deployment status\n        run: |\n          echo \"Workflow completed with status: ${{ job.status }}\"\n          echo \"All jobs status:\"\n          echo \"Quality Check: ${{ needs.quality-check.result }}\"\n          echo \"Test: ${{ needs.test.result }}\"\n          echo \"Build: ${{ needs.build.result }}\"\n          echo \"Security: ${{ needs.security.result }}\"\n          echo \"Deploy Staging: ${{ needs.deploy-staging.result }}\"\n          echo \"Deploy Production: ${{ needs.deploy-production.result }}\"",
      "language": "yaml",
      "scenario": "Complete enterprise-grade CI/CD workflow with comprehensive testing, security scanning, and multi-environment deployment"
    },
    {
      "title": "Workflow Events and Triggers Configuration",
      "description": "Comprehensive examples of GitHub Actions workflow triggers and event handling",
      "code": "# Advanced Workflow Events and Triggers\n# .github/workflows/events-demo.yml\n\nname: Workflow Events Demo\n\n# 1. PUSH EVENTS - Triggered on code pushes\non:\n  push:\n    # Specific branches\n    branches:\n      - main\n      - develop\n      - 'release/*'    # Wildcard pattern\n      - 'hotfix/**'    # Nested wildcard\n    \n    # Exclude branches\n    branches-ignore:\n      - 'experimental/*'\n      - 'archive/*'\n    \n    # Specific paths\n    paths:\n      - 'src/**'\n      - 'tests/**'\n      - 'package.json'\n      - 'Dockerfile'\n    \n    # Exclude paths\n    paths-ignore:\n      - '**.md'\n      - 'docs/**'\n      - '.github/workflows/other.yml'\n    \n    # Specific tags\n    tags:\n      - 'v*.*.*'      # Semantic version tags\n      - 'release-*'   # Release tags\n    \n    # Exclude tags\n    tags-ignore:\n      - 'v*-alpha'\n      - 'v*-beta'\n\n---\n# 2. PULL REQUEST EVENTS\nname: Pull Request Workflow\n\non:\n  pull_request:\n    # PR activity types\n    types:\n      - opened          # PR created\n      - synchronize     # New commits pushed\n      - reopened        # PR reopened\n      - ready_for_review # Draft -> Ready\n      - review_requested # Reviewer assigned\n    \n    # Target branches\n    branches:\n      - main\n      - develop\n    \n    # Source branches\n    branches:\n      - 'feature/*'\n      - 'bugfix/*'\n    \n    # File changes\n    paths:\n      - 'src/**'\n      - 'tests/**'\n\n  # Pull request reviews\n  pull_request_review:\n    types:\n      - submitted       # Review submitted\n      - edited         # Review edited\n      - dismissed      # Review dismissed\n\n  # Pull request review comments\n  pull_request_review_comment:\n    types:\n      - created\n      - edited\n      - deleted\n\njobs:\n  pr-validation:\n    name: PR Validation\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Checkout PR\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      \n      - name: PR Information\n        run: |\n          echo \"PR Number: ${{ github.event.number }}\"\n          echo \"PR Title: ${{ github.event.pull_request.title }}\"\n          echo \"PR Author: ${{ github.event.pull_request.user.login }}\"\n          echo \"Source Branch: ${{ github.event.pull_request.head.ref }}\"\n          echo \"Target Branch: ${{ github.event.pull_request.base.ref }}\"\n          echo \"PR State: ${{ github.event.pull_request.state }}\"\n          echo \"Is Draft: ${{ github.event.pull_request.draft }}\"\n      \n      - name: Changed Files\n        id: changes\n        uses: dorny/paths-filter@v2\n        with:\n          filters: |\n            src:\n              - 'src/**'\n            tests:\n              - 'tests/**'\n            docs:\n              - '**.md'\n              - 'docs/**'\n            config:\n              - '*.json'\n              - '*.yml'\n              - '*.yaml'\n      \n      - name: Run tests if source changed\n        if: steps.changes.outputs.src == 'true'\n        run: npm test\n      \n      - name: Validate docs if changed\n        if: steps.changes.outputs.docs == 'true'\n        run: npm run docs:validate\n\n---\n# 3. ISSUE EVENTS\nname: Issue Management\n\non:\n  issues:\n    types:\n      - opened\n      - edited\n      - closed\n      - reopened\n      - assigned\n      - unassigned\n      - labeled\n      - unlabeled\n  \n  issue_comment:\n    types:\n      - created\n      - edited\n      - deleted\n\njobs:\n  issue-automation:\n    name: Issue Automation\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Auto-label issues\n        if: github.event.action == 'opened'\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const issue = context.payload.issue;\n            const labels = [];\n            \n            // Auto-label based on content\n            if (issue.title.toLowerCase().includes('bug')) {\n              labels.push('bug');\n            }\n            if (issue.title.toLowerCase().includes('feature')) {\n              labels.push('enhancement');\n            }\n            if (issue.body.includes('<!-- priority: high -->')) {\n              labels.push('priority:high');\n            }\n            \n            if (labels.length > 0) {\n              await github.rest.issues.addLabels({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                issue_number: issue.number,\n                labels: labels\n              });\n            }\n      \n      - name: Assign to project\n        if: github.event.action == 'labeled'\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const label = context.payload.label.name;\n            if (label === 'bug') {\n              // Add to bug triage project\n              console.log('Adding issue to bug triage project');\n            }\n\n---\n# 4. SCHEDULED EVENTS\nname: Scheduled Tasks\n\non:\n  schedule:\n    # Every day at 2 AM UTC\n    - cron: '0 2 * * *'\n    # Every Monday at 9 AM UTC\n    - cron: '0 9 * * MON'\n    # Every 15 minutes (for monitoring)\n    - cron: '*/15 * * * *'\n    # First day of every month\n    - cron: '0 0 1 * *'\n\njobs:\n  daily-maintenance:\n    name: Daily Maintenance\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Cleanup old branches\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const { data: branches } = await github.rest.repos.listBranches({\n              owner: context.repo.owner,\n              repo: context.repo.repo\n            });\n            \n            for (const branch of branches) {\n              if (branch.name.startsWith('feature/') && \n                  new Date() - new Date(branch.commit.commit.author.date) > 30 * 24 * 60 * 60 * 1000) {\n                console.log(`Deleting old branch: ${branch.name}`);\n                // await github.rest.git.deleteRef({\n                //   owner: context.repo.owner,\n                //   repo: context.repo.repo,\n                //   ref: `heads/${branch.name}`\n                // });\n              }\n            }\n      \n      - name: Update dependencies\n        run: |\n          npm audit\n          npm outdated\n          # Automated dependency updates could go here\n\n---\n# 5. REPOSITORY EVENTS\nname: Repository Events\n\non:\n  # New releases\n  release:\n    types:\n      - published\n      - created\n      - edited\n      - deleted\n  \n  # Stars and forks\n  watch:\n    types: [started]\n  \n  fork:\n  \n  # Wiki changes\n  gollum:\n  \n  # Repository settings\n  repository:\n    types:\n      - created\n      - deleted\n      - archived\n      - unarchived\n      - publicized\n      - privatized\n\njobs:\n  repository-events:\n    name: Repository Events Handler\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Handle release\n        if: github.event_name == 'release'\n        run: |\n          echo \"Release event: ${{ github.event.action }}\"\n          echo \"Release tag: ${{ github.event.release.tag_name }}\"\n          echo \"Release name: ${{ github.event.release.name }}\"\n      \n      - name: New star notification\n        if: github.event_name == 'watch'\n        run: |\n          echo \"New star from: ${{ github.event.sender.login }}\"\n          # Could send notification to team chat\n      \n      - name: New fork notification\n        if: github.event_name == 'fork'\n        run: |\n          echo \"Repository forked by: ${{ github.event.forkee.owner.login }}\"\n          echo \"Fork URL: ${{ github.event.forkee.html_url }}\"\n\n---\n# 6. WORKFLOW DISPATCH (Manual Triggers)\nname: Manual Workflow\n\non:\n  workflow_dispatch:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        default: 'staging'\n        type: choice\n        options:\n          - development\n          - staging\n          - production\n      \n      version:\n        description: 'Version to deploy'\n        required: false\n        default: 'latest'\n        type: string\n      \n      run_tests:\n        description: 'Run tests before deployment'\n        required: false\n        default: true\n        type: boolean\n      \n      debug_mode:\n        description: 'Enable debug logging'\n        required: false\n        default: false\n        type: boolean\n      \n      notification_channel:\n        description: 'Slack channel for notifications'\n        required: false\n        default: '#deployments'\n        type: string\n\njobs:\n  manual-deployment:\n    name: Manual Deployment\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Display inputs\n        run: |\n          echo \"Environment: ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Run tests: ${{ inputs.run_tests }}\"\n          echo \"Debug mode: ${{ inputs.debug_mode }}\"\n          echo \"Notification channel: ${{ inputs.notification_channel }}\"\n      \n      - name: Run tests\n        if: ${{ inputs.run_tests }}\n        run: |\n          echo \"Running tests...\"\n          npm test\n      \n      - name: Deploy\n        run: |\n          echo \"Deploying version ${{ inputs.version }} to ${{ inputs.environment }}\"\n          if [[ \"${{ inputs.debug_mode }}\" == \"true\" ]]; then\n            echo \"Debug mode enabled\"\n            export DEBUG=true\n          fi\n          # Deployment logic here\n\n---\n# 7. WORKFLOW CALL (Reusable Workflows)\nname: Reusable Workflow\n\non:\n  workflow_call:\n    inputs:\n      node-version:\n        required: false\n        type: string\n        default: '18'\n      \n      environment:\n        required: true\n        type: string\n    \n    secrets:\n      deploy-key:\n        required: true\n      \n      notification-webhook:\n        required: false\n    \n    outputs:\n      deployment-url:\n        description: 'URL of deployed application'\n        value: ${{ jobs.deploy.outputs.url }}\n\njobs:\n  deploy:\n    name: Deploy Application\n    runs-on: ubuntu-latest\n    outputs:\n      url: ${{ steps.deploy.outputs.url }}\n    \n    steps:\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ inputs.node-version }}\n      \n      - name: Deploy\n        id: deploy\n        run: |\n          echo \"Deploying to ${{ inputs.environment }}\"\n          # Deployment logic\n          echo \"url=https://${{ inputs.environment }}.example.com\" >> $GITHUB_OUTPUT\n      \n      - name: Notify\n        if: ${{ secrets.notification-webhook }}\n        run: |\n          curl -X POST ${{ secrets.notification-webhook }} \\\n            -H 'Content-Type: application/json' \\\n            -d '{\"text\": \"Deployment to ${{ inputs.environment }} completed\"}'\n\n---\n# 8. CONDITIONAL WORKFLOWS\nname: Conditional Execution\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  determine-changes:\n    name: Determine Changes\n    runs-on: ubuntu-latest\n    outputs:\n      frontend: ${{ steps.changes.outputs.frontend }}\n      backend: ${{ steps.changes.outputs.backend }}\n      docs: ${{ steps.changes.outputs.docs }}\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - uses: dorny/paths-filter@v2\n        id: changes\n        with:\n          filters: |\n            frontend:\n              - 'frontend/**'\n              - 'package.json'\n            backend:\n              - 'backend/**'\n              - 'api/**'\n            docs:\n              - 'docs/**'\n              - '**.md'\n  \n  frontend-tests:\n    name: Frontend Tests\n    runs-on: ubuntu-latest\n    needs: determine-changes\n    if: needs.determine-changes.outputs.frontend == 'true'\n    \n    steps:\n      - uses: actions/checkout@v4\n      - name: Run frontend tests\n        run: npm run test:frontend\n  \n  backend-tests:\n    name: Backend Tests\n    runs-on: ubuntu-latest\n    needs: determine-changes\n    if: needs.determine-changes.outputs.backend == 'true'\n    \n    steps:\n      - uses: actions/checkout@v4\n      - name: Run backend tests\n        run: npm run test:backend\n  \n  docs-validation:\n    name: Documentation Validation\n    runs-on: ubuntu-latest\n    needs: determine-changes\n    if: needs.determine-changes.outputs.docs == 'true'\n    \n    steps:\n      - uses: actions/checkout@v4\n      - name: Validate documentation\n        run: npm run docs:validate",
      "language": "yaml",
      "scenario": "Comprehensive workflow event triggers and conditional execution patterns"
    }
  ],
  "troubleshooting": [
    {
      "problem": "Workflow not triggering on push to specific branch",
      "solution": "Check branch name spelling and ensure the branch exists in the repository",
      "commands": ["git branch -a", "git push origin branch-name"],
      "details": "Verify branch names match exactly in workflow file and that the branch has been pushed to remote"
    },
    {
      "problem": "Job failing with 'Resource not accessible by integration' error",
      "solution": "Check workflow permissions and ensure the GITHUB_TOKEN has necessary scopes",
      "commands": ["Check workflow permissions section", "Verify token scopes"],
      "details": "Add appropriate permissions block to workflow or use personal access token for elevated permissions"
    },
    {
      "problem": "Secrets not available in workflow",
      "solution": "Verify secrets are properly set in repository settings and referenced correctly",
      "commands": ["Check repository settings > Secrets", "Verify secret names"],
      "details": "Ensure secrets are defined at the correct level (repository, environment, or organization)"
    },
    {
      "problem": "Matrix build failing on specific combinations",
      "solution": "Use 'continue-on-error' or exclude problematic combinations from matrix",
      "commands": ["Add continue-on-error: true", "Use matrix.exclude"],
      "details": "Some matrix combinations may be incompatible; handle them gracefully or exclude them"
    },
    {
      "problem": "Workflow consuming too many minutes",
      "solution": "Optimize job dependencies, use caching, and parallel execution where possible",
      "commands": ["Check job dependencies", "Implement caching", "Review parallel jobs"],
      "details": "Analyze workflow execution time and optimize bottlenecks; consider using self-hosted runners for heavy workloads"
    }
  ],
  "tags": ["github-actions", "ci-cd", "workflows", "automation", "events", "jobs", "yaml", "devops"]
}
