{
  "id": "advanced-workflows",
  "toolId": "github-actions",
  "name": "Advanced Workflows",
  "description": "Master complex workflow patterns including matrix builds, reusable workflows, environments, and advanced automation techniques",
  "difficulty": "advanced",
  "definitions": {
    "beginner": "Advanced workflows use sophisticated features like matrix strategies to run jobs across multiple configurations, reusable workflows for sharing common patterns, and environments for deployment management with approval gates.",
    "advanced": "Advanced workflows leverage matrix builds for comprehensive testing across multiple dimensions, composite actions for complex reusability, environment protection rules with required reviewers, dynamic workflow generation, conditional logic, and sophisticated artifact management for enterprise-scale automation."
  },
  "commands": [
    {
      "command": "gh workflow list",
      "description": "List all workflows in the repository",
      "example": "gh workflow list",
      "flags": [
        {
          "flag": "--all",
          "description": "Include disabled workflows",
          "example": "--all"
        },
        {
          "flag": "--json",
          "description": "Output in JSON format",
          "example": "--json"
        },
        {
          "flag": "--limit",
          "description": "Maximum number of workflows to list",
          "example": "--limit 50"
        }
      ]
    },
    {
      "command": "gh workflow run",
      "description": "Trigger a workflow run with inputs",
      "example": "gh workflow run release.yml",
      "flags": [
        {
          "flag": "--ref",
          "description": "Git reference to run workflow on",
          "example": "--ref v2.0.0"
        },
        {
          "flag": "--field",
          "description": "Set workflow input field",
          "example": "--field environment=production"
        },
        {
          "flag": "--json",
          "description": "Read inputs from JSON file",
          "example": "--json inputs.json"
        }
      ]
    },
    {
      "command": "matrix strategy",
      "description": "Run jobs across multiple configurations",
      "example": "strategy: { matrix: { node: [16, 18, 20] } }",
      "flags": [
        {
          "flag": "matrix.<key>",
          "description": "Define matrix dimension",
          "example": "matrix.os: [ubuntu-latest, windows-latest]"
        },
        {
          "flag": "include",
          "description": "Add additional matrix combinations",
          "example": "include: [{ node: 18, experimental: true }]"
        },
        {
          "flag": "exclude",
          "description": "Remove specific matrix combinations",
          "example": "exclude: [{ node: 16, os: windows-latest }]"
        }
      ]
    },
    {
      "command": "workflow_call",
      "description": "Create reusable workflows called by other workflows",
      "example": "on: workflow_call",
      "flags": [
        {
          "flag": "inputs",
          "description": "Define workflow inputs",
          "example": "inputs: { environment: { required: true, type: string } }"
        },
        {
          "flag": "outputs",
          "description": "Define workflow outputs",
          "example": "outputs: { result: { value: ${{ jobs.build.outputs.result } }"
        },
        {
          "flag": "secrets",
          "description": "Define required secrets",
          "example": "secrets: { token: { required: true } }"
        }
      ]
    }
  ],
  "examples": [
    {
      "title": "Matrix Build Strategy",
      "description": "Comprehensive matrix testing across multiple dimensions with include/exclude patterns",
      "code": "# Matrix Build Strategy\n# .github/workflows/matrix-builds.yml\n\nname: 🧪 Matrix Testing Strategy\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n  workflow_dispatch:\n    inputs:\n      test_target:\n        description: 'Test target selection'\n        required: false\n        type: choice\n        options:\n          - all\n          - core\n          - integration\n        default: 'all'\n\nenv:\n  FORCE_COLOR: 1\n  NODE_OPTIONS: '--max_old_space_size=4096'\n\njobs:\n  # Job 1: Build Matrix\n  build-matrix:\n    name: 🏗️ Build (${{ matrix.os }}, Node ${{ matrix.node }}, ${{ matrix.package-manager }})\n    runs-on: ${{ matrix.os }}\n    \n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        node: ['16', '18', '20']\n        package-manager: [npm, yarn, pnpm]\n        include:\n          # Add experimental combinations\n          - os: ubuntu-latest\n            node: '21'\n            package-manager: npm\n            experimental: true\n          - os: ubuntu-latest\n            node: '18'\n            package-manager: bun\n            experimental: true\n          # Add specific configurations\n          - os: ubuntu-latest\n            node: '18'\n            package-manager: npm\n            coverage: true\n            sonar: true\n        exclude:\n          # Exclude Windows + pnpm (compatibility issues)\n          - os: windows-latest\n            package-manager: pnpm\n          # Exclude old Node on macOS (performance)\n          - os: macos-latest\n            node: '16'\n    \n    continue-on-error: ${{ matrix.experimental || false }}\n    \n    outputs:\n      build-success: ${{ steps.build.outcome == 'success' }}\n      test-results: ${{ steps.test.outputs.results }}\n      coverage-report: ${{ steps.coverage.outputs.report-url }}\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js ${{ matrix.node }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node }}\n          cache: ${{ matrix.package-manager }}\n      \n      - name: Setup package manager\n        run: |\n          case \"${{ matrix.package-manager }}\" in\n            npm)\n              echo \"Using npm (built-in)\"\n              ;;\n            yarn)\n              npm install -g yarn\n              echo \"PACKAGE_MANAGER=yarn\" >> $GITHUB_ENV\n              ;;\n            pnpm)\n              npm install -g pnpm\n              echo \"PACKAGE_MANAGER=pnpm\" >> $GITHUB_ENV\n              ;;\n            bun)\n              curl -fsSL https://bun.sh/install | bash\n              echo \"$HOME/.bun/bin\" >> $GITHUB_PATH\n              echo \"PACKAGE_MANAGER=bun\" >> $GITHUB_ENV\n              ;;\n          esac\n        shell: bash\n      \n      - name: Get package manager version\n        id: pm-version\n        run: |\n          case \"${{ matrix.package-manager }}\" in\n            npm) VERSION=$(npm --version) ;;\n            yarn) VERSION=$(yarn --version) ;;\n            pnpm) VERSION=$(pnpm --version) ;;\n            bun) VERSION=$(bun --version) ;;\n          esac\n          echo \"version=$VERSION\" >> $GITHUB_OUTPUT\n          echo \"Package manager version: $VERSION\"\n        shell: bash\n      \n      - name: Cache dependencies\n        uses: actions/cache@v3\n        with:\n          path: |\n            ~/.npm\n            ~/.yarn\n            ~/.cache/pnpm\n            ~/.bun\n          key: ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node }}-${{ hashFiles('**/package*.json') }}\n          restore-keys: |\n            ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node }}-\n            ${{ runner.os }}-${{ matrix.package-manager }}-\n      \n      - name: Install dependencies\n        run: |\n          case \"${{ matrix.package-manager }}\" in\n            npm) npm ci --prefer-offline ;;\n            yarn) yarn install --frozen-lockfile ;;\n            pnpm) pnpm install --frozen-lockfile ;;\n            bun) bun install --frozen-lockfile ;;\n          esac\n        shell: bash\n      \n      - name: Build application\n        id: build\n        run: |\n          case \"${{ matrix.package-manager }}\" in\n            npm) npm run build ;;\n            yarn) yarn build ;;\n            pnpm) pnpm build ;;\n            bun) bun run build ;;\n          esac\n        shell: bash\n      \n      - name: Run tests\n        id: test\n        run: |\n          TEST_COMMAND=\"test\"\n          if [ \"${{ inputs.test_target }}\" != \"all\" ]; then\n            TEST_COMMAND=\"test:${{ inputs.test_target }}\"\n          fi\n          \n          case \"${{ matrix.package-manager }}\" in\n            npm) npm run $TEST_COMMAND ;;\n            yarn) yarn $TEST_COMMAND ;;\n            pnpm) pnpm $TEST_COMMAND ;;\n            bun) bun run $TEST_COMMAND ;;\n          esac\n          \n          echo \"results=passed\" >> $GITHUB_OUTPUT\n        env:\n          NODE_ENV: test\n          CI: true\n        shell: bash\n      \n      - name: Generate coverage report\n        id: coverage\n        if: matrix.coverage\n        run: |\n          npm run test:coverage\n          REPORT_URL=\"https://codecov.io/gh/${{ github.repository }}/commit/${{ github.sha }}\"\n          echo \"report-url=$REPORT_URL\" >> $GITHUB_OUTPUT\n      \n      - name: Upload coverage\n        if: matrix.coverage\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n          flags: ${{ matrix.os }}-node${{ matrix.node }}-${{ matrix.package-manager }}\n          name: coverage-${{ matrix.os }}-node${{ matrix.node }}-${{ matrix.package-manager }}\n      \n      - name: SonarCloud analysis\n        if: matrix.sonar\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      \n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v4\n        with:\n          name: build-${{ matrix.os }}-node${{ matrix.node }}-${{ matrix.package-manager }}\n          path: |\n            dist/\n            build/\n            .next/\n          retention-days: 3\n      \n      - name: Performance benchmark\n        if: matrix.node == '18' && matrix.package-manager == 'npm'\n        run: |\n          npm run benchmark\n          npm run lighthouse:ci\n      \n      - name: Create deployment artifact\n        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && matrix.node == '18'\n        run: |\n          tar -czf deployment-${{ github.sha }}.tar.gz \\\n            dist/ package.json package-lock.json\n      \n      - name: Upload deployment artifact\n        if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest' && matrix.node == '18'\n        uses: actions/upload-artifact@v4\n        with:\n          name: deployment-artifact\n          path: deployment-${{ github.sha }}.tar.gz\n          retention-days: 30\n\n  # Job 2: Cross-Platform Integration Tests\n  integration-matrix:\n    name: 🔗 Integration (${{ matrix.platform.os }}, ${{ matrix.database }}, ${{ matrix.cache }})\n    runs-on: ${{ matrix.platform.os }}\n    needs: build-matrix\n    \n    strategy:\n      fail-fast: false\n      matrix:\n        platform:\n          - { os: ubuntu-latest, shell: bash }\n          - { os: windows-latest, shell: powershell }\n          - { os: macos-latest, shell: bash }\n        database: [postgres, mysql, mongodb]\n        cache: [redis, memcached]\n        test-suite: [api, graphql, websocket]\n        include:\n          # Add specific configurations for heavy testing\n          - platform: { os: ubuntu-latest, shell: bash }\n            database: postgres\n            cache: redis\n            test-suite: full\n            heavy: true\n        exclude:\n          # Exclude MongoDB on Windows (Docker issues)\n          - platform: { os: windows-latest, shell: powershell }\n            database: mongodb\n          # Exclude memcached on macOS (compatibility)\n          - platform: { os: macos-latest, shell: bash }\n            cache: memcached\n    \n    services:\n      postgres:\n        image: ${{ matrix.database == 'postgres' && 'postgres:15' || '' }}\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      mysql:\n        image: ${{ matrix.database == 'mysql' && 'mysql:8.0' || '' }}\n        env:\n          MYSQL_ROOT_PASSWORD: root\n          MYSQL_DATABASE: test_db\n        options: >-\n          --health-cmd \"mysqladmin ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 3306:3306\n      \n      mongodb:\n        image: ${{ matrix.database == 'mongodb' && 'mongo:6.0' || '' }}\n        options: >-\n          --health-cmd \"mongo --eval 'db.adminCommand(\\\"ismaster\\\")'\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 27017:27017\n      \n      redis:\n        image: ${{ matrix.cache == 'redis' && 'redis:7-alpine' || '' }}\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup platform-specific tools\n        shell: ${{ matrix.platform.shell }}\n        run: |\n          if [ \"${{ matrix.platform.os }}\" = \"ubuntu-latest\" ]; then\n            sudo apt-get update\n            sudo apt-get install -y postgresql-client mysql-client\n          elif [ \"${{ matrix.platform.os }}\" = \"macos-latest\" ]; then\n            brew install postgresql mysql\n          elif [ \"${{ matrix.platform.os }}\" = \"windows-latest\" ]; then\n            choco install postgresql mysql mongodb\n          fi\n      \n      - name: Download build artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: build-${{ matrix.platform.os }}-node18-npm\n          path: ./build-artifacts\n      \n      - name: Setup services configuration\n        shell: ${{ matrix.platform.shell }}\n        run: |\n          case \"${{ matrix.database }}\" in\n            postgres)\n              echo \"DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db\" >> $GITHUB_ENV\n              ;;\n            mysql)\n              echo \"DATABASE_URL=mysql://root:root@localhost:3306/test_db\" >> $GITHUB_ENV\n              ;;\n            mongodb)\n              echo \"DATABASE_URL=mongodb://localhost:27017/test_db\" >> $GITHUB_ENV\n              ;;\n          esac\n          \n          case \"${{ matrix.cache }}\" in\n            redis)\n              echo \"CACHE_URL=redis://localhost:6379\" >> $GITHUB_ENV\n              ;;\n            memcached)\n              echo \"CACHE_URL=memcached://localhost:11211\" >> $GITHUB_ENV\n              ;;\n          esac\n      \n      - name: Wait for services\n        shell: ${{ matrix.platform.shell }}\n        run: |\n          echo \"Waiting for services to be ready...\"\n          sleep 10\n          \n          # Test database connection\n          case \"${{ matrix.database }}\" in\n            postgres)\n              timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done' || true\n              ;;\n            mysql)\n              timeout 30 bash -c 'until mysqladmin ping -h localhost -P 3306 -u root -proot; do sleep 1; done' || true\n              ;;\n            mongodb)\n              timeout 30 bash -c 'until mongo --host localhost:27017 --eval \"db.adminCommand(\\\"ismaster\\\")\"; do sleep 1; done' || true\n              ;;\n          esac\n      \n      - name: Run integration tests\n        shell: ${{ matrix.platform.shell }}\n        run: |\n          npm run test:integration:${{ matrix.test-suite }}\n        env:\n          NODE_ENV: test\n          CI: true\n          TEST_TIMEOUT: 30000\n      \n      - name: Run heavy test suite\n        if: matrix.heavy\n        shell: ${{ matrix.platform.shell }}\n        run: |\n          npm run test:integration:heavy\n          npm run test:load:basic\n        env:\n          NODE_ENV: test\n          HEAVY_TESTS: true\n      \n      - name: Upload integration test results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: integration-results-${{ matrix.platform.os }}-${{ matrix.database }}-${{ matrix.cache }}-${{ matrix.test-suite }}\n          path: |\n            test-results/integration/\n            logs/\n          retention-days: 7\n\n  # Job 3: Browser Compatibility Matrix\n  browser-matrix:\n    name: 🌐 Browser Tests (${{ matrix.browser.name }} ${{ matrix.browser.version }})\n    runs-on: ubuntu-latest\n    needs: build-matrix\n    \n    strategy:\n      fail-fast: false\n      matrix:\n        browser:\n          - { name: chrome, version: 'latest' }\n          - { name: chrome, version: '109' }  # Older version\n          - { name: firefox, version: 'latest' }\n          - { name: firefox, version: '108' }  # Older version\n          - { name: safari, version: 'latest' }\n          - { name: edge, version: 'latest' }\n        viewport:\n          - { width: 1920, height: 1080, name: 'desktop' }\n          - { width: 1024, height: 768, name: 'tablet' }\n          - { width: 375, height: 667, name: 'mobile' }\n        include:\n          # Add specific browser + viewport combinations\n          - browser: { name: chrome, version: 'latest' }\n            viewport: { width: 1920, height: 1080, name: 'desktop' }\n            performance: true\n            accessibility: true\n        exclude:\n          # Skip older browsers on mobile (performance)\n          - browser: { name: chrome, version: '109' }\n            viewport: { width: 375, height: 667, name: 'mobile' }\n          - browser: { name: firefox, version: '108' }\n            viewport: { width: 375, height: 667, name: 'mobile' }\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Download build artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: build-ubuntu-latest-node18-npm\n          path: ./dist\n      \n      - name: Install Playwright browsers\n        run: |\n          npx playwright install ${{ matrix.browser.name }}\n          npx playwright install-deps ${{ matrix.browser.name }}\n      \n      - name: Start application\n        run: |\n          npm start &\n          sleep 10\n          curl -f http://localhost:3000/health\n        env:\n          NODE_ENV: production\n      \n      - name: Run E2E tests\n        run: |\n          npx playwright test \\\n            --project=${{ matrix.browser.name }} \\\n            --config=playwright.config.ts \\\n            --reporter=html,junit \\\n            --output-dir=test-results/${{ matrix.browser.name }}-${{ matrix.viewport.name }}\n        env:\n          BROWSER: ${{ matrix.browser.name }}\n          BROWSER_VERSION: ${{ matrix.browser.version }}\n          VIEWPORT_WIDTH: ${{ matrix.viewport.width }}\n          VIEWPORT_HEIGHT: ${{ matrix.viewport.height }}\n          BASE_URL: http://localhost:3000\n      \n      - name: Run performance tests\n        if: matrix.performance\n        run: |\n          npm run test:performance:browser\n          npm run lighthouse:ci\n        env:\n          BROWSER: ${{ matrix.browser.name }}\n          VIEWPORT: ${{ matrix.viewport.name }}\n      \n      - name: Run accessibility tests\n        if: matrix.accessibility\n        run: |\n          npm run test:a11y:browser\n        env:\n          BROWSER: ${{ matrix.browser.name }}\n      \n      - name: Upload browser test results\n        uses: actions/upload-artifact@v4\n        if: always()\n        with:\n          name: browser-results-${{ matrix.browser.name }}-${{ matrix.browser.version }}-${{ matrix.viewport.name }}\n          path: |\n            test-results/${{ matrix.browser.name }}-${{ matrix.viewport.name }}/\n            playwright-report/\n            lighthouse-report/\n            a11y-report/\n          retention-days: 7\n\n  # Job 4: Matrix Results Summary\n  matrix-summary:\n    name: 📊 Matrix Results Summary\n    runs-on: ubuntu-latest\n    needs: [build-matrix, integration-matrix, browser-matrix]\n    if: always()\n    \n    steps:\n      - name: Download all test artifacts\n        uses: actions/download-artifact@v4\n        with:\n          path: ./all-results\n      \n      - name: Generate matrix summary\n        run: |\n          echo \"# 🧪 Matrix Testing Results\" > matrix-summary.md\n          echo \"\" >> matrix-summary.md\n          \n          echo \"## Build Matrix Results\" >> matrix-summary.md\n          echo \"| OS | Node | Package Manager | Status |\" >> matrix-summary.md\n          echo \"|----|----|----------------|--------|\" >> matrix-summary.md\n          \n          # Parse build results (simplified)\n          echo \"| Ubuntu | 18 | npm | ✅ |\" >> matrix-summary.md\n          echo \"| Windows | 18 | npm | ✅ |\" >> matrix-summary.md\n          echo \"| macOS | 18 | npm | ✅ |\" >> matrix-summary.md\n          \n          echo \"\" >> matrix-summary.md\n          echo \"## Integration Matrix Results\" >> matrix-summary.md\n          echo \"| Platform | Database | Cache | Test Suite | Status |\" >> matrix-summary.md\n          echo \"|----------|----------|-------|------------|--------|\" >> matrix-summary.md\n          echo \"| Ubuntu | postgres | redis | api | ✅ |\" >> matrix-summary.md\n          echo \"| Ubuntu | mysql | redis | graphql | ✅ |\" >> matrix-summary.md\n          \n          echo \"\" >> matrix-summary.md\n          echo \"## Browser Matrix Results\" >> matrix-summary.md\n          echo \"| Browser | Version | Viewport | Status |\" >> matrix-summary.md\n          echo \"|---------|---------|----------|--------|\" >> matrix-summary.md\n          echo \"| Chrome | latest | desktop | ✅ |\" >> matrix-summary.md\n          echo \"| Firefox | latest | mobile | ✅ |\" >> matrix-summary.md\n          \n          cat matrix-summary.md\n      \n      - name: Upload matrix summary\n        uses: actions/upload-artifact@v4\n        with:\n          name: matrix-summary\n          path: matrix-summary.md\n          retention-days: 30",
      "language": "yaml",
      "scenario": "Comprehensive matrix testing strategy covering multiple dimensions with conditional execution and result aggregation"
    },
    {
      "title": "Reusable Workflows",
      "description": "Create and use reusable workflows for common patterns across repositories",
      "code": "# Reusable Workflow: CI Template\n# .github/workflows/reusable-ci.yml\n\nname: 🔄 Reusable CI Workflow\n\non:\n  workflow_call:\n    inputs:\n      node-version:\n        description: 'Node.js version to use'\n        required: false\n        type: string\n        default: '18'\n      \n      package-manager:\n        description: 'Package manager to use'\n        required: false\n        type: string\n        default: 'npm'\n      \n      run-tests:\n        description: 'Whether to run tests'\n        required: false\n        type: boolean\n        default: true\n      \n      run-security-scan:\n        description: 'Whether to run security scanning'\n        required: false\n        type: boolean\n        default: false\n      \n      environment:\n        description: 'Target environment'\n        required: false\n        type: string\n        default: 'development'\n      \n      working-directory:\n        description: 'Working directory for the project'\n        required: false\n        type: string\n        default: '.'\n    \n    outputs:\n      build-success:\n        description: 'Whether the build was successful'\n        value: ${{ jobs.build.outputs.success }}\n      \n      test-results:\n        description: 'Test results summary'\n        value: ${{ jobs.test.outputs.results }}\n      \n      security-score:\n        description: 'Security scan score'\n        value: ${{ jobs.security.outputs.score }}\n      \n      artifact-name:\n        description: 'Name of the build artifact'\n        value: ${{ jobs.build.outputs.artifact-name }}\n    \n    secrets:\n      SONAR_TOKEN:\n        description: 'SonarCloud token for code analysis'\n        required: false\n      \n      SNYK_TOKEN:\n        description: 'Snyk token for security scanning'\n        required: false\n      \n      NPM_TOKEN:\n        description: 'NPM token for private packages'\n        required: false\n      \n      CODECOV_TOKEN:\n        description: 'Codecov token for coverage reporting'\n        required: false\n\nenv:\n  NODE_VERSION: ${{ inputs.node-version }}\n  PACKAGE_MANAGER: ${{ inputs.package-manager }}\n  WORKING_DIR: ${{ inputs.working-directory }}\n\njobs:\n  # Job 1: Setup and Build\n  build:\n    name: 🏗️ Build Application\n    runs-on: ubuntu-latest\n    outputs:\n      success: ${{ steps.build-check.outputs.success }}\n      artifact-name: ${{ steps.artifact.outputs.name }}\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: ${{ env.PACKAGE_MANAGER }}\n          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json\n      \n      - name: Setup package manager\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm)\n              echo \"Using npm\"\n              ;;\n            yarn)\n              npm install -g yarn\n              ;;\n            pnpm)\n              npm install -g pnpm\n              ;;\n          esac\n      \n      - name: Configure NPM registry\n        if: secrets.NPM_TOKEN\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          echo \"//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}\" > .npmrc\n      \n      - name: Install dependencies\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm ci --prefer-offline ;;\n            yarn) yarn install --frozen-lockfile ;;\n            pnpm) pnpm install --frozen-lockfile ;;\n          esac\n      \n      - name: Lint code\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm run lint ;;\n            yarn) yarn lint ;;\n            pnpm) pnpm lint ;;\n          esac\n      \n      - name: Type check\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm run type-check ;;\n            yarn) yarn type-check ;;\n            pnpm) pnpm type-check ;;\n          esac\n      \n      - name: Build application\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm run build ;;\n            yarn) yarn build ;;\n            pnpm) pnpm build ;;\n          esac\n        env:\n          NODE_ENV: production\n          ENVIRONMENT: ${{ inputs.environment }}\n      \n      - name: Build check\n        id: build-check\n        run: |\n          if [ -d \"${{ env.WORKING_DIR }}/dist\" ] || [ -d \"${{ env.WORKING_DIR }}/build\" ] || [ -d \"${{ env.WORKING_DIR }}/.next\" ]; then\n            echo \"success=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"success=false\" >> $GITHUB_OUTPUT\n          fi\n      \n      - name: Create artifact\n        id: artifact\n        if: steps.build-check.outputs.success == 'true'\n        run: |\n          ARTIFACT_NAME=\"build-${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.sha }}\"\n          echo \"name=$ARTIFACT_NAME\" >> $GITHUB_OUTPUT\n      \n      - name: Upload build artifacts\n        if: steps.build-check.outputs.success == 'true'\n        uses: actions/upload-artifact@v4\n        with:\n          name: ${{ steps.artifact.outputs.name }}\n          path: |\n            ${{ env.WORKING_DIR }}/dist/\n            ${{ env.WORKING_DIR }}/build/\n            ${{ env.WORKING_DIR }}/.next/\n            ${{ env.WORKING_DIR }}/package.json\n          retention-days: 7\n\n  # Job 2: Testing\n  test:\n    name: 🧪 Run Tests\n    runs-on: ubuntu-latest\n    needs: build\n    if: inputs.run-tests && needs.build.outputs.success == 'true'\n    outputs:\n      results: ${{ steps.test-summary.outputs.results }}\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: ${{ env.PACKAGE_MANAGER }}\n      \n      - name: Install dependencies\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm ci ;;\n            yarn) yarn install --frozen-lockfile ;;\n            pnpm) pnpm install --frozen-lockfile ;;\n          esac\n      \n      - name: Run unit tests\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm run test:unit -- --coverage ;;\n            yarn) yarn test:unit --coverage ;;\n            pnpm) pnpm test:unit --coverage ;;\n          esac\n        env:\n          CI: true\n      \n      - name: Run integration tests\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          case \"${{ env.PACKAGE_MANAGER }}\" in\n            npm) npm run test:integration ;;\n            yarn) yarn test:integration ;;\n            pnpm) pnpm test:integration ;;\n          esac\n        env:\n          CI: true\n      \n      - name: Upload coverage\n        if: secrets.CODECOV_TOKEN\n        uses: codecov/codecov-action@v3\n        with:\n          file: ${{ env.WORKING_DIR }}/coverage/lcov.info\n          token: ${{ secrets.CODECOV_TOKEN }}\n          flags: reusable-workflow\n      \n      - name: Test summary\n        id: test-summary\n        run: |\n          if [ -f \"${{ env.WORKING_DIR }}/coverage/coverage-summary.json\" ]; then\n            COVERAGE=$(node -p \"require('${{ env.WORKING_DIR }}/coverage/coverage-summary.json').total.lines.pct\")\n            echo \"results=passed,coverage:${COVERAGE}%\" >> $GITHUB_OUTPUT\n          else\n            echo \"results=passed,coverage:unknown\" >> $GITHUB_OUTPUT\n          fi\n\n  # Job 3: Security Scanning\n  security:\n    name: 🔒 Security Scan\n    runs-on: ubuntu-latest\n    needs: build\n    if: inputs.run-security-scan && needs.build.outputs.success == 'true'\n    outputs:\n      score: ${{ steps.security-score.outputs.score }}\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n      \n      - name: Install dependencies\n        working-directory: ${{ env.WORKING_DIR }}\n        run: npm ci\n      \n      - name: Audit dependencies\n        working-directory: ${{ env.WORKING_DIR }}\n        run: |\n          npm audit --audit-level high\n          npm audit --json > audit-report.json\n        continue-on-error: true\n      \n      - name: Snyk security scan\n        if: secrets.SNYK_TOKEN\n        uses: snyk/actions/node@master\n        env:\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        with:\n          args: --severity-threshold=high --file=${{ env.WORKING_DIR }}/package.json\n      \n      - name: SonarCloud scan\n        if: secrets.SONAR_TOKEN\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n        with:\n          projectBaseDir: ${{ env.WORKING_DIR }}\n      \n      - name: Calculate security score\n        id: security-score\n        run: |\n          # Simplified security score calculation\n          AUDIT_SCORE=85\n          if [ -f \"audit-report.json\" ]; then\n            VULNS=$(jq '.metadata.vulnerabilities.total' audit-report.json 2>/dev/null || echo 0)\n            AUDIT_SCORE=$((100 - VULNS * 5))\n            if [ $AUDIT_SCORE -lt 0 ]; then AUDIT_SCORE=0; fi\n          fi\n          echo \"score=$AUDIT_SCORE\" >> $GITHUB_OUTPUT\n      \n      - name: Upload security reports\n        uses: actions/upload-artifact@v4\n        with:\n          name: security-reports\n          path: |\n            audit-report.json\n            snyk-report.json\n          retention-days: 30\n\n---\n\n# Consumer Workflow: Frontend CI\n# .github/workflows/frontend-ci.yml\n\nname: 🎨 Frontend CI\n\non:\n  push:\n    branches: [main, develop]\n    paths:\n      - 'frontend/**'\n      - '.github/workflows/frontend-ci.yml'\n  pull_request:\n    branches: [main]\n    paths:\n      - 'frontend/**'\n\njobs:\n  # Use the reusable workflow\n  ci:\n    name: 🔄 Frontend CI Pipeline\n    uses: ./.github/workflows/reusable-ci.yml\n    with:\n      node-version: '18'\n      package-manager: 'npm'\n      run-tests: true\n      run-security-scan: true\n      environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}\n      working-directory: './frontend'\n    secrets:\n      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n  \n  # Deploy if CI passes\n  deploy:\n    name: 🚀 Deploy Frontend\n    runs-on: ubuntu-latest\n    needs: ci\n    if: github.ref == 'refs/heads/main' && needs.ci.outputs.build-success == 'true'\n    environment:\n      name: production\n      url: https://app.example.com\n    \n    steps:\n      - name: Download build artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: ${{ needs.ci.outputs.artifact-name }}\n          path: ./build\n      \n      - name: Deploy to production\n        run: |\n          echo \"Deploying frontend to production...\"\n          echo \"Build artifact: ${{ needs.ci.outputs.artifact-name }}\"\n          echo \"Test results: ${{ needs.ci.outputs.test-results }}\"\n          echo \"Security score: ${{ needs.ci.outputs.security-score }}\"\n          \n          # Deployment logic here\n          aws s3 sync ./build s3://my-frontend-bucket --delete\n          aws cloudfront create-invalidation --distribution-id E1234567890 --paths \"/*\"\n      \n      - name: Notify team\n        run: |\n          echo \"✅ Frontend deployed successfully!\"\n          echo \"Security Score: ${{ needs.ci.outputs.security-score }}/100\"\n\n---\n\n# Consumer Workflow: Backend CI\n# .github/workflows/backend-ci.yml\n\nname: 🔧 Backend CI\n\non:\n  push:\n    branches: [main, develop]\n    paths:\n      - 'backend/**'\n      - '.github/workflows/backend-ci.yml'\n  pull_request:\n    branches: [main]\n    paths:\n      - 'backend/**'\n\njobs:\n  ci:\n    name: 🔄 Backend CI Pipeline\n    uses: ./.github/workflows/reusable-ci.yml\n    with:\n      node-version: '18'\n      package-manager: 'npm'\n      run-tests: true\n      run-security-scan: true\n      environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}\n      working-directory: './backend'\n    secrets:\n      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n  \n  docker-build:\n    name: 🐳 Build Docker Image\n    runs-on: ubuntu-latest\n    needs: ci\n    if: needs.ci.outputs.build-success == 'true'\n    \n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Download build artifacts\n        uses: actions/download-artifact@v4\n        with:\n          name: ${{ needs.ci.outputs.artifact-name }}\n          path: ./backend/dist\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and push\n        uses: docker/build-push-action@v5\n        with:\n          context: ./backend\n          push: ${{ github.ref == 'refs/heads/main' }}\n          tags: |\n            ghcr.io/${{ github.repository }}-backend:latest\n            ghcr.io/${{ github.repository }}-backend:${{ github.sha }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max",
      "language": "yaml",
      "scenario": "Reusable workflow architecture for sharing common CI/CD patterns across multiple repositories and projects"
    }
  ],
  "troubleshooting": [
    {
      "problem": "Matrix build failing with 'matrix must be defined' error",
      "solution": "Ensure matrix strategy is properly structured and contains valid combinations",
      "commands": ["strategy: { matrix: { key: [value1, value2] } }", "matrix: ${{ fromJSON('[\"val1\", \"val2\"]') }}"],
      "details": "Matrix strategy requires proper YAML structure; use include/exclude for complex combinations"
    },
    {
      "problem": "Reusable workflow not found or unauthorized",
      "solution": "Check workflow path, repository permissions, and ensure workflow_call trigger is defined",
      "commands": ["uses: ./.github/workflows/reusable.yml", "uses: owner/repo/.github/workflows/reusable.yml@main"],
      "details": "Reusable workflows must be in .github/workflows/ and accessible to calling repository"
    },
    {
      "problem": "Environment protection rules blocking deployment",
      "solution": "Configure environment protection rules and required reviewers correctly",
      "commands": ["gh api repos/:owner/:repo/environments/:env/protection-rules", "environment: { name: prod, url: https://app.com }"],
      "details": "Environment protection rules require proper configuration in repository settings"
    },
    {
      "problem": "Matrix job outputs not accessible in dependent jobs",
      "solution": "Use job outputs and JSON arrays to aggregate matrix results",
      "commands": ["outputs: { results: ${{ toJSON(steps.*.outputs) } }", "needs.matrix-job.outputs.results"],
      "details": "Matrix job outputs require aggregation; use toJSON() and fromJSON() for complex data"
    },
    {
      "problem": "Workflow inputs not working in reusable workflows",
      "solution": "Define inputs correctly in workflow_call trigger and reference with inputs context",
      "commands": ["inputs: { param: { type: string, required: true } }", "${{ inputs.param }}"],
      "details": "Workflow inputs must be defined in on.workflow_call.inputs section"
    }
  ],
  "tags": ["matrix-builds", "reusable-workflows", "environments", "advanced-patterns", "workflow-orchestration", "conditional-logic"]
}
