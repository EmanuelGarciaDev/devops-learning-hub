{
  "id": "collaboration",
  "toolId": "git",
  "name": "Git Collaboration & GitHub",
  "description": "Master team collaboration workflows with Git and GitHub including pull requests, code reviews, and team management",
  "difficulty": "intermediate",
  "definitions": {
    "beginner": "Git collaboration involves working with other developers on the same project using remote repositories. GitHub provides tools like pull requests, issues, and code reviews to coordinate team development and maintain code quality.",
    "advanced": "Git collaboration leverages distributed version control architecture with remote repositories serving as synchronization points. GitHub enhances this with web-based collaboration features including pull request workflows, protected branches, CODEOWNERS files, and automated checks that enforce code quality and review processes in enterprise development environments."
  },
  "commands": [
    {
      "command": "git remote",
      "description": "Manage remote repository connections",
      "example": "git remote add origin https://github.com/user/repo.git",
      "flags": [
        {
          "flag": "-v",
          "description": "Show remote URLs",
          "example": "-v"
        },
        {
          "flag": "add",
          "description": "Add new remote",
          "example": "add upstream https://github.com/original/repo.git"
        },
        {
          "flag": "remove",
          "description": "Remove remote",
          "example": "remove old-origin"
        }
      ]
    },
    {
      "command": "git fetch",
      "description": "Download objects and refs from remote repository",
      "example": "git fetch origin",
      "flags": [
        {
          "flag": "--all",
          "description": "Fetch from all remotes",
          "example": "--all"
        },
        {
          "flag": "--prune",
          "description": "Remove deleted remote branches",
          "example": "--prune"
        },
        {
          "flag": "--dry-run",
          "description": "Show what would be fetched",
          "example": "--dry-run"
        }
      ]
    },
    {
      "command": "git pull",
      "description": "Fetch and merge changes from remote branch",
      "example": "git pull origin main",
      "flags": [
        {
          "flag": "--rebase",
          "description": "Rebase instead of merge",
          "example": "--rebase"
        },
        {
          "flag": "--ff-only",
          "description": "Only fast-forward merges",
          "example": "--ff-only"
        },
        {
          "flag": "--no-commit",
          "description": "Don't commit automatically",
          "example": "--no-commit"
        }
      ]
    },
    {
      "command": "git push",
      "description": "Upload local changes to remote repository",
      "example": "git push origin main",
      "flags": [
        {
          "flag": "-u",
          "description": "Set upstream tracking",
          "example": "-u origin feature-branch"
        },
        {
          "flag": "--force-with-lease",
          "description": "Safe force push",
          "example": "--force-with-lease"
        },
        {
          "flag": "--delete",
          "description": "Delete remote branch",
          "example": "--delete origin old-feature"
        }
      ]
    },
    {
      "command": "gh pr",
      "description": "GitHub CLI pull request management",
      "example": "gh pr create --title \"Add new feature\"",
      "flags": [
        {
          "flag": "create",
          "description": "Create new pull request",
          "example": "create --base main --head feature-branch"
        },
        {
          "flag": "list",
          "description": "List pull requests",
          "example": "list --state open"
        },
        {
          "flag": "review",
          "description": "Review pull request",
          "example": "review 123 --approve"
        }
      ]
    }
  ],
  "examples": [
    {
      "title": "Complete GitHub Collaboration Workflow",
      "description": "End-to-end collaboration workflow from fork to pull request and code review",
      "code": "#!/bin/bash\n# Complete GitHub Collaboration Workflow\n# Demonstrates professional team collaboration patterns\n\necho \"=== GitHub Collaboration Workflow Demo ===\"\n\n# Step 1: Fork and Clone Repository\necho \"\\n=== Step 1: Repository Setup ===\"\n\n# Original repository owner setup\nmkdir original-project\ncd original-project\ngit init\n\n# Create initial project structure\ncat > README.md << 'EOF'\n# Team Collaboration Project\n\nA demonstration of professional Git/GitHub workflows.\n\n## Contributing\n\nPlease read our contributing guidelines before submitting pull requests.\n\n## Code Review Process\n\n1. Fork the repository\n2. Create feature branch\n3. Make changes with tests\n4. Submit pull request\n5. Address review feedback\n6. Merge after approval\nEOF\n\ncat > CONTRIBUTING.md << 'EOF'\n# Contributing Guidelines\n\n## Development Workflow\n\n### 1. Fork and Clone\n```bash\n# Fork on GitHub, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/project.git\ncd project\ngit remote add upstream https://github.com/ORIGINAL_OWNER/project.git\n```\n\n### 2. Create Feature Branch\n```bash\ngit checkout -b feature/your-feature-name\n```\n\n### 3. Make Changes\n- Write clear, descriptive commit messages\n- Include tests for new functionality\n- Follow code style guidelines\n- Update documentation\n\n### 4. Submit Pull Request\n- Push to your fork\n- Create pull request on GitHub\n- Fill out PR template completely\n- Link related issues\n\n## Code Standards\n\n- Use meaningful variable names\n- Add comments for complex logic\n- Write unit tests for new features\n- Follow existing code style\n- Update documentation\n\n## Review Process\n\n- All PRs require at least 2 approvals\n- Address all review comments\n- Ensure CI checks pass\n- Squash commits before merge\nEOF\n\ncat > .github/pull_request_template.md << 'EOF'\n## Description\n\nBrief description of changes made in this PR.\n\n## Type of Change\n\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Related Issues\n\nFixes #(issue number)\nCloses #(issue number)\nRelated to #(issue number)\n\n## Changes Made\n\n- List specific changes\n- Include technical details\n- Mention any dependencies\n\n## Testing\n\n- [ ] Unit tests added/updated\n- [ ] Integration tests pass\n- [ ] Manual testing completed\n- [ ] All existing tests pass\n\n## Screenshots (if applicable)\n\n<!-- Add screenshots here -->\n\n## Checklist\n\n- [ ] My code follows the style guidelines\n- [ ] I have performed a self-review\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally\nEOF\n\n# Create CODEOWNERS file for required reviews\ncat > .github/CODEOWNERS << 'EOF'\n# Global code owners\n* @teamlead @senior-dev\n\n# Frontend code\n/src/frontend/ @frontend-team @ui-designer\n\n# Backend code\n/src/backend/ @backend-team @devops-engineer\n\n# Database migrations\n/migrations/ @database-admin @backend-team\n\n# CI/CD and infrastructure\n/.github/ @devops-engineer @teamlead\n/docker/ @devops-engineer\n/kubernetes/ @devops-engineer\n\n# Documentation\n/docs/ @technical-writer @teamlead\n*.md @technical-writer\n\n# Security-sensitive files\n/src/auth/ @security-team @teamlead\n/src/payment/ @security-team @backend-team\nEOF\n\n# Create basic project structure\nmkdir -p src/{frontend,backend,shared} tests docs\necho \"console.log('Hello, collaboration!');\" > src/backend/app.js\necho \"<h1>Team Project</h1>\" > src/frontend/index.html\necho \"# API Documentation\" > docs/api.md\n\ngit add .\ngit commit -m \"Initial commit: Project setup with collaboration guidelines\n\n- Add comprehensive contributing guidelines\n- Set up PR template for consistent submissions\n- Configure CODEOWNERS for required reviews\n- Create basic project structure\"\n\n# Simulate GitHub repository (in real scenario, push to GitHub)\necho \"\\n📝 Repository created and pushed to GitHub\"\necho \"Repository URL: https://github.com/teamlead/team-project\"\n\n# Step 2: Contributor forks and clones\necho \"\\n=== Step 2: Contributor Workflow ===\"\ncd ..\nmkdir contributor-workspace\ncd contributor-workspace\n\n# Simulate cloning fork\ngit clone ../original-project team-project-fork\ncd team-project-fork\n\n# Add upstream remote\necho \"git remote add upstream https://github.com/teamlead/team-project.git\"\necho \"git fetch upstream\"\n\n# Step 3: Feature development\necho \"\\n=== Step 3: Feature Development ===\"\n\n# Create feature branch\ngit checkout -b feature/user-authentication\n\n# Implement authentication feature\nmkdir -p src/backend/auth\ncat > src/backend/auth/authController.js << 'EOF'\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\nconst { validationResult } = require('express-validator');\nconst rateLimit = require('express-rate-limit');\n\n// Rate limiting for auth endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: 'Too many authentication attempts, please try again later.',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nclass AuthController {\n  /**\n   * Register a new user\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  async register(req, res) {\n    try {\n      // Validate input\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({\n          success: false,\n          message: 'Validation failed',\n          errors: errors.array()\n        });\n      }\n\n      const { username, email, password } = req.body;\n\n      // Check if user already exists\n      const existingUser = await User.findByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({\n          success: false,\n          message: 'User with this email already exists'\n        });\n      }\n\n      // Hash password with salt\n      const saltRounds = 12;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n      // Create user\n      const user = await User.create({\n        username,\n        email,\n        password: hashedPassword\n      });\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { \n          userId: user.id, \n          email: user.email,\n          role: user.role \n        },\n        process.env.JWT_SECRET,\n        { \n          expiresIn: process.env.JWT_EXPIRES_IN || '24h',\n          issuer: 'team-project-api',\n          audience: 'team-project-client'\n        }\n      );\n\n      // Log successful registration (without sensitive data)\n      console.log(`New user registered: ${email} (ID: ${user.id})`);\n\n      res.status(201).json({\n        success: true,\n        message: 'User registered successfully',\n        data: {\n          token,\n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role,\n            createdAt: user.createdAt\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error during registration'\n      });\n    }\n  }\n\n  /**\n   * Authenticate user login\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  async login(req, res) {\n    try {\n      // Validate input\n      const errors = validationResult(req);\n      if (!errors.isEmpty()) {\n        return res.status(400).json({\n          success: false,\n          message: 'Validation failed',\n          errors: errors.array()\n        });\n      }\n\n      const { email, password } = req.body;\n\n      // Find user by email\n      const user = await User.findByEmail(email);\n      if (!user) {\n        return res.status(401).json({\n          success: false,\n          message: 'Invalid email or password'\n        });\n      }\n\n      // Check if account is active\n      if (!user.isActive) {\n        return res.status(401).json({\n          success: false,\n          message: 'Account is deactivated. Please contact support.'\n        });\n      }\n\n      // Verify password\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (!isPasswordValid) {\n        // Log failed login attempt\n        console.warn(`Failed login attempt for email: ${email}`);\n        \n        return res.status(401).json({\n          success: false,\n          message: 'Invalid email or password'\n        });\n      }\n\n      // Update last login timestamp\n      await User.updateLastLogin(user.id);\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { \n          userId: user.id, \n          email: user.email,\n          role: user.role \n        },\n        process.env.JWT_SECRET,\n        { \n          expiresIn: process.env.JWT_EXPIRES_IN || '24h',\n          issuer: 'team-project-api',\n          audience: 'team-project-client'\n        }\n      );\n\n      // Log successful login\n      console.log(`User logged in: ${email} (ID: ${user.id})`);\n\n      res.json({\n        success: true,\n        message: 'Login successful',\n        data: {\n          token,\n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            role: user.role,\n            lastLogin: new Date()\n          }\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error during login'\n      });\n    }\n  }\n\n  /**\n   * Logout user (token blacklisting would be implemented in production)\n   * @param {Object} req - Express request object\n   * @param {Object} res - Express response object\n   */\n  async logout(req, res) {\n    try {\n      // In production, implement token blacklisting\n      // For now, just log the logout\n      console.log(`User logged out: ${req.user.email} (ID: ${req.user.userId})`);\n      \n      res.json({\n        success: true,\n        message: 'Logout successful'\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Internal server error during logout'\n      });\n    }\n  }\n}\n\nmodule.exports = {\n  AuthController: new AuthController(),\n  authLimiter\n};\nEOF\n\n# Add authentication middleware\ncat > src/backend/auth/authMiddleware.js << 'EOF'\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/User');\n\n/**\n * Middleware to verify JWT token and authenticate user\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n * @param {Function} next - Express next function\n */\nconst authenticateToken = async (req, res, next) => {\n  try {\n    // Get token from Authorization header\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.startsWith('Bearer ') \n      ? authHeader.slice(7) \n      : null;\n\n    if (!token) {\n      return res.status(401).json({\n        success: false,\n        message: 'Access token is required'\n      });\n    }\n\n    // Verify token\n    const decoded = jwt.verify(token, process.env.JWT_SECRET, {\n      issuer: 'team-project-api',\n      audience: 'team-project-client'\n    });\n\n    // Check if user still exists and is active\n    const user = await User.findById(decoded.userId);\n    if (!user || !user.isActive) {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid token or user not found'\n      });\n    }\n\n    // Add user info to request object\n    req.user = {\n      userId: user.id,\n      email: user.email,\n      username: user.username,\n      role: user.role\n    };\n\n    next();\n  } catch (error) {\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        success: false,\n        message: 'Invalid token'\n      });\n    }\n    \n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        success: false,\n        message: 'Token has expired'\n      });\n    }\n\n    console.error('Authentication error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error during authentication'\n    });\n  }\n};\n\n/**\n * Middleware to check if user has required role\n * @param {Array} allowedRoles - Array of allowed roles\n * @returns {Function} Express middleware function\n */\nconst requireRole = (allowedRoles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({\n        success: false,\n        message: 'Authentication required'\n      });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({\n        success: false,\n        message: 'Insufficient permissions'\n      });\n    }\n\n    next();\n  };\n};\n\nmodule.exports = {\n  authenticateToken,\n  requireRole\n};\nEOF\n\n# Add comprehensive tests\nmkdir -p tests/auth\ncat > tests/auth/authController.test.js << 'EOF'\nconst request = require('supertest');\nconst app = require('../../src/backend/app');\nconst User = require('../../src/backend/models/User');\nconst jwt = require('jsonwebtoken');\n\n// Mock User model\njest.mock('../../src/backend/models/User');\n\ndescribe('AuthController', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/auth/register', () => {\n    const validUserData = {\n      username: 'testuser',\n      email: 'test@example.com',\n      password: 'SecurePass123!'\n    };\n\n    it('should register a new user successfully', async () => {\n      User.findByEmail.mockResolvedValue(null);\n      User.create.mockResolvedValue({\n        id: 'user123',\n        username: 'testuser',\n        email: 'test@example.com',\n        role: 'user',\n        createdAt: new Date()\n      });\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(validUserData)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.token).toBeDefined();\n      expect(response.body.data.user.email).toBe(validUserData.email);\n      expect(response.body.data.user.password).toBeUndefined();\n    });\n\n    it('should reject registration with existing email', async () => {\n      User.findByEmail.mockResolvedValue({ id: 'existing' });\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(validUserData)\n        .expect(409);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('already exists');\n    });\n\n    it('should reject registration with invalid email format', async () => {\n      const invalidData = {\n        ...validUserData,\n        email: 'invalid-email'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(invalidData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('Validation failed');\n    });\n\n    it('should reject weak passwords', async () => {\n      const weakPasswordData = {\n        ...validUserData,\n        password: '123'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(weakPasswordData)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n\n  describe('POST /api/auth/login', () => {\n    const loginData = {\n      email: 'test@example.com',\n      password: 'SecurePass123!'\n    };\n\n    it('should login with valid credentials', async () => {\n      const mockUser = {\n        id: 'user123',\n        username: 'testuser',\n        email: 'test@example.com',\n        password: '$2b$12$hashedpassword',\n        role: 'user',\n        isActive: true\n      };\n\n      User.findByEmail.mockResolvedValue(mockUser);\n      User.updateLastLogin.mockResolvedValue(true);\n      \n      // Mock bcrypt.compare to return true\n      const bcrypt = require('bcrypt');\n      bcrypt.compare = jest.fn().mockResolvedValue(true);\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.token).toBeDefined();\n      expect(response.body.data.user.email).toBe(loginData.email);\n    });\n\n    it('should reject login with invalid email', async () => {\n      User.findByEmail.mockResolvedValue(null);\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.message).toContain('Invalid email or password');\n    });\n\n    it('should reject login with wrong password', async () => {\n      const mockUser = {\n        id: 'user123',\n        email: 'test@example.com',\n        password: '$2b$12$hashedpassword',\n        isActive: true\n      };\n\n      User.findByEmail.mockResolvedValue(mockUser);\n      \n      const bcrypt = require('bcrypt');\n      bcrypt.compare = jest.fn().mockResolvedValue(false);\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should reject login for deactivated accounts', async () => {\n      const mockUser = {\n        id: 'user123',\n        email: 'test@example.com',\n        password: '$2b$12$hashedpassword',\n        isActive: false\n      };\n\n      User.findByEmail.mockResolvedValue(mockUser);\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.message).toContain('deactivated');\n    });\n  });\n\n  describe('POST /api/auth/logout', () => {\n    it('should logout successfully with valid token', async () => {\n      const token = jwt.sign(\n        { userId: 'user123', email: 'test@example.com' },\n        process.env.JWT_SECRET || 'test-secret'\n      );\n\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .set('Authorization', `Bearer ${token}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.message).toContain('Logout successful');\n    });\n\n    it('should reject logout without token', async () => {\n      const response = await request(app)\n        .post('/api/auth/logout')\n        .expect(401);\n\n      expect(response.body.success).toBe(false);\n    });\n  });\n});\nEOF\n\n# Update package.json with new dependencies\ncat > package.json << 'EOF'\n{\n  \"name\": \"team-collaboration-project\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Demonstration of Git/GitHub collaboration workflows\",\n  \"main\": \"src/backend/app.js\",\n  \"scripts\": {\n    \"start\": \"node src/backend/app.js\",\n    \"dev\": \"nodemon src/backend/app.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint src/\",\n    \"lint:fix\": \"eslint src/ --fix\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.0\",\n    \"bcrypt\": \"^5.1.0\",\n    \"jsonwebtoken\": \"^9.0.0\",\n    \"express-validator\": \"^6.14.0\",\n    \"express-rate-limit\": \"^6.7.0\",\n    \"dotenv\": \"^16.0.0\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^6.1.0\"\n  },\n  \"devDependencies\": {\n    \"jest\": \"^29.0.0\",\n    \"supertest\": \"^6.3.0\",\n    \"nodemon\": \"^2.0.0\",\n    \"eslint\": \"^8.40.0\"\n  },\n  \"keywords\": [\"collaboration\", \"authentication\", \"express\", \"nodejs\"],\n  \"author\": \"Development Team\",\n  \"license\": \"MIT\"\n}\nEOF\n\n# Commit feature implementation\ngit add .\ngit commit -m \"Implement user authentication system\n\n- Add comprehensive AuthController with registration, login, logout\n- Implement JWT-based authentication middleware\n- Add role-based access control\n- Include rate limiting for security\n- Add comprehensive test suite with 95%+ coverage\n- Update package.json with required dependencies\n\nFeatures:\n- Secure password hashing with bcrypt\n- JWT token generation and validation\n- Input validation and sanitization\n- Rate limiting for auth endpoints\n- Comprehensive error handling\n- Audit logging for security events\"\n\n# Add documentation\ncat > docs/authentication.md << 'EOF'\n# Authentication System\n\n## Overview\n\nThe authentication system provides secure user registration, login, and session management using JWT tokens.\n\n## Features\n\n- **Secure Registration**: Password hashing with bcrypt (12 rounds)\n- **JWT Authentication**: Stateless token-based authentication\n- **Rate Limiting**: Protection against brute force attacks\n- **Role-Based Access**: Support for different user roles\n- **Input Validation**: Comprehensive request validation\n- **Audit Logging**: Security event logging\n\n## API Endpoints\n\n### POST /api/auth/register\n\nRegister a new user account.\n\n**Request Body:**\n```json\n{\n  \"username\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n```\n\n**Response:**\n```json\n{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIs...\",\n    \"user\": {\n      \"id\": \"user123\",\n      \"username\": \"johndoe\",\n      \"email\": \"john@example.com\",\n      \"role\": \"user\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\"\n    }\n  }\n}\n```\n\n### POST /api/auth/login\n\nAuthenticate user and get access token.\n\n**Request Body:**\n```json\n{\n  \"email\": \"john@example.com\",\n  \"password\": \"SecurePassword123!\"\n}\n```\n\n### POST /api/auth/logout\n\nLogout user (requires authentication).\n\n**Headers:**\n```\nAuthorization: Bearer <token>\n```\n\n## Security Features\n\n- **Password Requirements**: Minimum 8 characters, must include letters and numbers\n- **Rate Limiting**: 5 attempts per 15 minutes for auth endpoints\n- **Token Expiration**: 24 hours (configurable)\n- **HTTPS Only**: Secure token transmission\n- **Input Sanitization**: Protection against injection attacks\n\n## Usage Examples\n\n### Client-side Integration\n\n```javascript\n// Registration\nconst registerUser = async (userData) => {\n  const response = await fetch('/api/auth/register', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  \n  const result = await response.json();\n  \n  if (result.success) {\n    localStorage.setItem('token', result.data.token);\n    return result.data.user;\n  }\n  \n  throw new Error(result.message);\n};\n\n// Login\nconst loginUser = async (email, password) => {\n  const response = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  });\n  \n  const result = await response.json();\n  \n  if (result.success) {\n    localStorage.setItem('token', result.data.token);\n    return result.data.user;\n  }\n  \n  throw new Error(result.message);\n};\n\n// Authenticated requests\nconst makeAuthenticatedRequest = async (url, options = {}) => {\n  const token = localStorage.getItem('token');\n  \n  return fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Authorization': `Bearer ${token}`\n    }\n  });\n};\n```\n\n## Testing\n\nRun the test suite:\n\n```bash\nnpm test\nnpm run test:coverage\n```\n\n## Environment Variables\n\n```bash\nJWT_SECRET=your-secret-key-here\nJWT_EXPIRES_IN=24h\nNODE_ENV=production\n```\nEOF\n\ngit add docs/authentication.md\ngit commit -m \"Add comprehensive authentication documentation\n\n- Document all API endpoints with examples\n- Include security features and best practices\n- Add client-side integration examples\n- Document testing and configuration\"\n\n# Step 4: Push to fork and create pull request\necho \"\\n=== Step 4: Push and Create Pull Request ===\"\necho \"Pushing feature branch to fork...\"\necho \"git push -u origin feature/user-authentication\"\n\n# Simulate GitHub CLI commands for PR creation\necho \"\\nCreating pull request with GitHub CLI:\"\ncat << 'EOF'\ngh pr create \\\n  --title \"Add User Authentication System\" \\\n  --body \"## Summary\n\nImplements comprehensive user authentication system with JWT tokens.\n\n## Changes Made\n\n- ✅ User registration with secure password hashing\n- ✅ JWT-based authentication middleware\n- ✅ Rate limiting for security\n- ✅ Role-based access control\n- ✅ Comprehensive test suite (95% coverage)\n- ✅ API documentation\n\n## Security Features\n\n- bcrypt password hashing (12 rounds)\n- JWT token validation\n- Rate limiting (5 attempts/15 min)\n- Input validation and sanitization\n- Audit logging\n\n## Testing\n\n```bash\nnpm test\nnpm run test:coverage\n```\n\nAll tests pass with 95%+ coverage.\n\n## Related Issues\n\nCloses #123 - User Authentication System\nRelated to #124 - Security Improvements\n\n## Checklist\n\n- [x] Code follows style guidelines\n- [x] Self-review completed\n- [x] Code is well-commented\n- [x] Documentation updated\n- [x] No new warnings\n- [x] Tests added and passing\n- [x] Security review completed\" \\\n  --base main \\\n  --head feature/user-authentication \\\n  --assignee @teamlead \\\n  --reviewer @senior-dev,@security-team \\\n  --label \"enhancement,security\"\nEOF\n\necho \"\\n📝 Pull Request Created!\"\necho \"URL: https://github.com/contributor/team-project/pull/42\"\n\n# Step 5: Code review process\necho \"\\n=== Step 5: Code Review Process ===\"\n\necho \"\\n👨‍💻 Senior Developer Review:\"\ncat << 'EOF'\n@senior-dev commented:\n\n**Overall Assessment: Excellent work! 🎉**\n\nThe authentication implementation is solid with good security practices.\n\n**Strengths:**\n- Comprehensive test coverage\n- Proper error handling\n- Security best practices (bcrypt, rate limiting)\n- Clear documentation\n\n**Suggestions for Improvement:**\n\n1. **Password Validation**: Consider adding password strength requirements\n   ```javascript\n   const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n   ```\n\n2. **Environment Variables**: Add validation for required env vars\n   ```javascript\n   if (!process.env.JWT_SECRET) {\n     throw new Error('JWT_SECRET environment variable is required');\n   }\n   ```\n\n3. **Rate Limiting**: Consider different limits for different endpoints\n\n**Requested Changes:**\n- Add password strength validation\n- Add environment variable validation\n- Update tests for new validation\n\nOtherwise, ready to merge after these minor improvements!\nEOF\n\necho \"\\n🔒 Security Team Review:\"\ncat << 'EOF'\n@security-team commented:\n\n**Security Review Complete ✅**\n\n**Security Checklist:**\n- [x] Password hashing implemented correctly (bcrypt, 12 rounds)\n- [x] JWT tokens properly signed and validated\n- [x] Rate limiting implemented\n- [x] Input validation in place\n- [x] No sensitive data in logs\n- [x] HTTPS enforcement (helmet middleware)\n- [x] SQL injection protection (parameterized queries)\n\n**Recommendations:**\n1. Consider implementing token refresh mechanism\n2. Add account lockout after multiple failed attempts\n3. Implement password expiration policy\n4. Add 2FA support in future iteration\n\n**Approved from security perspective** 🔒\nEOF\n\n# Step 6: Address review feedback\necho \"\\n=== Step 6: Address Review Feedback ===\"\n\n# Add password strength validation\ncat > src/backend/utils/validation.js << 'EOF'\nconst { body } = require('express-validator');\n\n/**\n * Password strength validation\n * Requires: 8+ chars, uppercase, lowercase, number, special char\n */\nconst passwordStrengthRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\nconst validateRegistration = [\n  body('username')\n    .isLength({ min: 3, max: 30 })\n    .withMessage('Username must be between 3 and 30 characters')\n    .matches(/^[a-zA-Z0-9_-]+$/)\n    .withMessage('Username can only contain letters, numbers, hyphens, and underscores'),\n    \n  body('email')\n    .isEmail()\n    .withMessage('Please provide a valid email address')\n    .normalizeEmail()\n    .isLength({ max: 254 })\n    .withMessage('Email address is too long'),\n    \n  body('password')\n    .matches(passwordStrengthRegex)\n    .withMessage('Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character (@$!%*?&)')\n];\n\nconst validateLogin = [\n  body('email')\n    .isEmail()\n    .withMessage('Please provide a valid email address')\n    .normalizeEmail(),\n    \n  body('password')\n    .notEmpty()\n    .withMessage('Password is required')\n];\n\n/**\n * Environment variable validation\n */\nconst validateEnvironment = () => {\n  const requiredEnvVars = [\n    'JWT_SECRET',\n    'NODE_ENV'\n  ];\n  \n  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n  \n  if (missingVars.length > 0) {\n    throw new Error(`Missing required environment variables: ${missingVars.join(', ')}`);\n  }\n  \n  if (process.env.JWT_SECRET.length < 32) {\n    throw new Error('JWT_SECRET must be at least 32 characters long');\n  }\n};\n\nmodule.exports = {\n  validateRegistration,\n  validateLogin,\n  validateEnvironment,\n  passwordStrengthRegex\n};\nEOF\n\n# Update AuthController to use new validation\necho \"Updated AuthController with improved validation...\"\n\n# Add comprehensive tests for new validation\ncat > tests/utils/validation.test.js << 'EOF'\nconst { passwordStrengthRegex, validateEnvironment } = require('../../src/backend/utils/validation');\n\ndescribe('Password Validation', () => {\n  test('should accept strong passwords', () => {\n    const strongPasswords = [\n      'SecurePass123!',\n      'MyP@ssw0rd2024',\n      'Tr0ub4dor&3'\n    ];\n    \n    strongPasswords.forEach(password => {\n      expect(passwordStrengthRegex.test(password)).toBe(true);\n    });\n  });\n  \n  test('should reject weak passwords', () => {\n    const weakPasswords = [\n      'password',        // no uppercase, numbers, special chars\n      'PASSWORD',        // no lowercase, numbers, special chars\n      '12345678',        // no letters, special chars\n      'Passw0rd',        // no special chars\n      'Pass123!',        // too short\n      'passw@rd',        // no uppercase, numbers\n    ];\n    \n    weakPasswords.forEach(password => {\n      expect(passwordStrengthRegex.test(password)).toBe(false);\n    });\n  });\n});\n\ndescribe('Environment Validation', () => {\n  const originalEnv = process.env;\n  \n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...originalEnv };\n  });\n  \n  afterAll(() => {\n    process.env = originalEnv;\n  });\n  \n  test('should pass with valid environment variables', () => {\n    process.env.JWT_SECRET = 'this-is-a-very-secure-secret-key-with-32-chars';\n    process.env.NODE_ENV = 'test';\n    \n    expect(() => validateEnvironment()).not.toThrow();\n  });\n  \n  test('should fail with missing JWT_SECRET', () => {\n    delete process.env.JWT_SECRET;\n    process.env.NODE_ENV = 'test';\n    \n    expect(() => validateEnvironment()).toThrow('Missing required environment variables');\n  });\n  \n  test('should fail with short JWT_SECRET', () => {\n    process.env.JWT_SECRET = 'short';\n    process.env.NODE_ENV = 'test';\n    \n    expect(() => validateEnvironment()).toThrow('JWT_SECRET must be at least 32 characters');\n  });\n});\nEOF\n\ngit add .\ngit commit -m \"Address code review feedback\n\n- Add comprehensive password strength validation\n- Implement environment variable validation\n- Add enhanced input sanitization\n- Update test suite for new validation rules\n- Improve error messages for better UX\n\nChanges requested by:\n- @senior-dev: Password validation and env var checks\n- @security-team: Enhanced security measures\"\n\necho \"\\n📝 Updated Pull Request with review feedback addressed\"\n\n# Step 7: Final approval and merge\necho \"\\n=== Step 7: Final Approval and Merge ===\"\n\necho \"\\n✅ @senior-dev approved:\"\necho \"Perfect! All feedback addressed. LGTM! 🚀\"\n\necho \"\\n✅ @security-team approved:\"\necho \"Security review complete. Approved for merge. 🔒\"\n\necho \"\\n✅ @teamlead merged PR:\"\necho \"Excellent work! Feature merged into main branch. 🎉\"\n\n# Simulate merge\ncd ../../original-project\ngit checkout main\ngit merge --no-ff feature/user-authentication\ngit tag -a v1.1.0 -m \"Release v1.1.0: Add user authentication system\"\n\necho \"\\n=== Step 8: Cleanup and Sync ===\"\n\n# Contributor syncs with upstream\ncd ../contributor-workspace/team-project-fork\necho \"Syncing fork with upstream...\"\necho \"git fetch upstream\"\necho \"git checkout main\"\necho \"git merge upstream/main\"\necho \"git push origin main\"\necho \"git branch -d feature/user-authentication\"\n\necho \"\\n✅ Collaboration workflow completed successfully!\"\n\necho \"\\n=== Workflow Summary ===\"\necho \"1. ✅ Repository forked and cloned\"\necho \"2. ✅ Feature branch created\"\necho \"3. ✅ Comprehensive feature implemented\"\necho \"4. ✅ Tests written and documentation added\"\necho \"5. ✅ Pull request created with detailed description\"\necho \"6. ✅ Code review process completed\"\necho \"7. ✅ Feedback addressed and approved\"\necho \"8. ✅ Feature merged and released\"\necho \"9. ✅ Fork synchronized with upstream\"\n\necho \"\\n🎉 Professional Git/GitHub collaboration workflow demonstrated!\"\n\necho \"\\n=== Best Practices Demonstrated ===\"\necho \"📋 Project setup with contribution guidelines\"\necho \"📝 Comprehensive PR templates\"\necho \"👥 CODEOWNERS for required reviews\"\necho \"🔒 Security-focused development\"\necho \"🧪 Test-driven development\"\necho \"📚 Comprehensive documentation\"\necho \"🔄 Proper code review process\"\necho \"🚀 Clean merge and release process\"",
      "language": "bash",
      "scenario": "Complete team collaboration workflow from fork to merge with comprehensive code review process"
    }
  ],
  "troubleshooting": [
    {
      "problem": "Pull request conflicts with main branch",
      "solution": "Rebase feature branch onto latest main before submitting PR",
      "commands": ["git fetch upstream", "git rebase upstream/main", "git push --force-with-lease"],
      "details": "Keep feature branches up-to-date with main to avoid complex merge conflicts"
    },
    {
      "problem": "Accidentally pushed sensitive data to repository",
      "solution": "Remove from history using git filter-branch or BFG Repo-Cleaner",
      "commands": ["git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch secrets.txt'", "git push --force-with-lease"],
      "details": "Change any exposed credentials immediately and notify team members"
    },
    {
      "problem": "PR build checks failing on CI/CD pipeline",
      "solution": "Run tests locally and fix issues before pushing updates",
      "commands": ["npm test", "npm run lint", "git commit --amend", "git push --force-with-lease"],
      "details": "Ensure all automated checks pass before requesting review"
    },
    {
      "problem": "Cannot push to remote repository (rejected)",
      "solution": "Pull latest changes first, then push your commits",
      "commands": ["git pull --rebase origin main", "git push origin feature-branch"],
      "details": "Remote has updates that aren't in your local repository"
    },
    {
      "problem": "Large binary files causing repository bloat",
      "solution": "Use Git LFS for large files and remove existing large files from history",
      "commands": ["git lfs install", "git lfs track '*.zip'", "git filter-branch --tree-filter 'rm -f largefile.zip'"],
      "details": "Configure .gitattributes for LFS and use external storage for large assets"
    }
  ],
  "tags": ["collaboration", "github", "pull-requests", "code-review", "team-workflows", "remote-repositories"]
}
