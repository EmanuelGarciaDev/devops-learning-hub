{
  "id": "configmaps-secrets",
  "toolId": "kubernetes",
  "name": "ConfigMaps & Secrets",
  "description": "Managing application configuration and sensitive data in Kubernetes",
  "difficulty": "beginner",
  "definitions": {
    "beginner": "ConfigMaps store configuration data that your apps need, while Secrets store sensitive information like passwords and API keys, both separate from your application code.",
    "advanced": "ConfigMaps provide a mechanism to inject configuration data into pods through environment variables, command-line arguments, or configuration files. Secrets store and manage sensitive information with base64 encoding and encryption at rest."
  },
  "commands": [
    {
      "command": "kubectl create configmap",
      "description": "Create a ConfigMap from literal values or files",
      "example": "kubectl create configmap app-config --from-literal=database.host=mysql --from-literal=database.port=3306"
    },
    {
      "command": "kubectl create secret",
      "description": "Create a Secret",
      "example": "kubectl create secret generic db-secret --from-literal=username=admin --from-literal=password=secret123"
    },
    {
      "command": "kubectl get configmaps",
      "description": "List all ConfigMaps",
      "example": "kubectl get configmaps"
    },
    {
      "command": "kubectl get secrets",
      "description": "List all Secrets",
      "example": "kubectl get secrets"
    },
    {
      "command": "kubectl describe configmap",
      "description": "Show ConfigMap details",
      "example": "kubectl describe configmap app-config"
    }
  ],
  "examples": [
    {
      "title": "ConfigMap from File",
      "description": "Create ConfigMap from configuration file",
      "code": "# Create config file\ncat > app.properties << EOF\ndatabase.host=mysql.example.com\ndatabase.port=3306\ndatabase.name=myapp\nlog.level=INFO\nEOF\n\n# Create ConfigMap from file\nkubectl create configmap app-config --from-file=app.properties\n\n# Use in pod\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app-pod\nspec:\n  containers:\n  - name: app\n    image: myapp:latest\n    volumeMounts:\n    - name: config\n      mountPath: /etc/config\n  volumes:\n  - name: config\n    configMap:\n      name: app-config",
      "language": "yaml",
      "scenario": "Loading application configuration from external file"
    },
    {
      "title": "Database Secret Usage",
      "description": "Secure database credentials with Secrets",
      "code": "# Create database secret\nkubectl create secret generic db-credentials \\\n  --from-literal=username=dbuser \\\n  --from-literal=password=supersecret123\n\n# Use secret in deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-app\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n    spec:\n      containers:\n      - name: app\n        image: myapp:latest\n        env:\n        - name: DB_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: db-credentials\n              key: username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: db-credentials\n              key: password",
      "language": "yaml",
      "scenario": "Securely passing database credentials to application"
    }
  ],
  "tags": ["configmaps", "secrets", "configuration", "environment", "security"]
}
