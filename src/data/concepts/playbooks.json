{
  "id": "playbooks",
  "toolId": "ansible",
  "name": "Playbooks",
  "description": "Learn Ansible playbooks - YAML-based automation scripts that define and orchestrate complex multi-machine deployments",
  "difficulty": "intermediate",
  "definitions": {
    "beginner": "Ansible playbooks are YAML files that contain a series of tasks and configurations to automate IT operations. They define what actions should be performed on which hosts, making infrastructure management repeatable and reliable.",
    "advanced": "Ansible playbooks are declarative automation frameworks that orchestrate complex multi-tier deployments through organized task sequences, variable management, conditional logic, loops, handlers, and error handling. They support advanced features like strategy plugins, async execution, delegation, and include/import mechanisms for modular automation."
  },
  "commands": [
    {
      "command": "ansible-playbook",
      "description": "Execute an Ansible playbook",
      "example": "ansible-playbook -i inventory playbook.yml",
      "flags": [
        {
          "flag": "-i",
          "description": "Specify inventory file or directory",
          "example": "-i production.ini"
        },
        {
          "flag": "--check",
          "description": "Dry run mode (don't make changes)",
          "example": "--check"
        },
        {
          "flag": "--diff",
          "description": "Show file differences",
          "example": "--diff"
        },
        {
          "flag": "--limit",
          "description": "Limit execution to specific hosts",
          "example": "--limit webservers"
        },
        {
          "flag": "--tags",
          "description": "Run only tasks with specific tags",
          "example": "--tags deploy,config"
        },
        {
          "flag": "--skip-tags",
          "description": "Skip tasks with specific tags",
          "example": "--skip-tags debug"
        },
        {
          "flag": "--extra-vars",
          "description": "Pass extra variables",
          "example": "--extra-vars 'version=1.2.3 env=prod'"
        }
      ]
    },
    {
      "command": "ansible-playbook --syntax-check",
      "description": "Check playbook syntax without execution",
      "example": "ansible-playbook --syntax-check site.yml"
    },
    {
      "command": "ansible-playbook --list-tasks",
      "description": "List all tasks in playbook",
      "example": "ansible-playbook --list-tasks deploy.yml"
    }
  ],
  "examples": [
    {
      "title": "Complete Web Application Deployment Playbook",
      "description": "Comprehensive playbook for deploying a web application with database, load balancer, and monitoring",
      "code": "---\n# site.yml - Complete Web Application Deployment\n- name: Deploy Web Application Infrastructure\n  hosts: localhost\n  gather_facts: false\n  vars:\n    app_name: \"myapp\"\n    app_version: \"{{ version | default('latest') }}\"\n    environment: \"{{ env | default('staging') }}\"\n    \n  tasks:\n    - name: Include environment-specific variables\n      include_vars: \"vars/{{ environment }}.yml\"\n      tags: [always]\n    \n    - name: Validate deployment parameters\n      assert:\n        that:\n          - app_version is defined\n          - app_version != \"\"\n          - environment in ['staging', 'production']\n        fail_msg: \"Invalid deployment parameters\"\n      tags: [validation]\n\n# Database Setup\n- name: Configure Database Servers\n  hosts: database\n  become: yes\n  vars:\n    mysql_root_password: \"{{ vault_mysql_root_password }}\"\n    mysql_databases:\n      - name: \"{{ app_name }}_{{ environment }}\"\n        collation: utf8_general_ci\n        encoding: utf8\n    mysql_users:\n      - name: \"{{ app_name }}_user\"\n        password: \"{{ vault_mysql_app_password }}\"\n        priv: \"{{ app_name }}_{{ environment }}.*:ALL\"\n        host: \"{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask }}\"\n  \n  pre_tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == \"Debian\"\n      \n    - name: Install required packages\n      package:\n        name:\n          - python3-pip\n          - python3-pymysql\n        state: present\n  \n  roles:\n    - role: geerlingguy.mysql\n      vars:\n        mysql_packages:\n          - mysql-server\n          - mysql-client\n          - python3-pymysql\n        mysql_bind_address: \"0.0.0.0\"\n        mysql_innodb_buffer_pool_size: \"{{ (ansible_memtotal_mb * 0.6) | int }}M\"\n  \n  tasks:\n    - name: Create application database\n      mysql_db:\n        name: \"{{ item.name }}\"\n        collation: \"{{ item.collation }}\"\n        encoding: \"{{ item.encoding }}\"\n        state: present\n        login_user: root\n        login_password: \"{{ mysql_root_password }}\"\n      loop: \"{{ mysql_databases }}\"\n      tags: [database]\n    \n    - name: Create application user\n      mysql_user:\n        name: \"{{ item.name }}\"\n        password: \"{{ item.password }}\"\n        priv: \"{{ item.priv }}\"\n        host: \"{{ item.host }}\"\n        state: present\n        login_user: root\n        login_password: \"{{ mysql_root_password }}\"\n      loop: \"{{ mysql_users }}\"\n      no_log: true\n      tags: [database]\n    \n    - name: Configure MySQL for production\n      template:\n        src: my.cnf.j2\n        dest: /etc/mysql/mysql.conf.d/99-production.cnf\n        backup: yes\n      notify: restart mysql\n      when: environment == \"production\"\n      tags: [database, config]\n  \n  handlers:\n    - name: restart mysql\n      service:\n        name: mysql\n        state: restarted\n\n# Application Servers\n- name: Deploy Application Servers\n  hosts: webservers\n  become: yes\n  serial: \"{{ rolling_update_batch | default(1) }}\"\n  max_fail_percentage: 10\n  \n  vars:\n    app_user: \"{{ app_name }}\"\n    app_home: \"/opt/{{ app_name }}\"\n    app_port: 8080\n    java_version: \"11\"\n  \n  pre_tasks:\n    - name: Remove from load balancer\n      uri:\n        url: \"http://{{ load_balancer_host }}/api/servers/{{ inventory_hostname }}\"\n        method: DELETE\n        status_code: [200, 404]\n      delegate_to: localhost\n      tags: [deploy]\n    \n    - name: Wait for connections to drain\n      wait_for:\n        timeout: 30\n      when: environment == \"production\"\n      tags: [deploy]\n  \n  tasks:\n    - name: Create application user\n      user:\n        name: \"{{ app_user }}\"\n        system: yes\n        shell: /bin/false\n        home: \"{{ app_home }}\"\n        createhome: yes\n      tags: [setup]\n    \n    - name: Install Java\n      package:\n        name: \"openjdk-{{ java_version }}-jdk\"\n        state: present\n      tags: [setup]\n    \n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_user }}\"\n        group: \"{{ app_user }}\"\n        mode: '0755'\n      loop:\n        - \"{{ app_home }}/bin\"\n        - \"{{ app_home }}/config\"\n        - \"{{ app_home }}/logs\"\n        - \"{{ app_home }}/data\"\n      tags: [setup]\n    \n    - name: Download application artifact\n      get_url:\n        url: \"{{ artifact_repository }}/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.jar\"\n        dest: \"{{ app_home }}/bin/{{ app_name }}.jar\"\n        owner: \"{{ app_user }}\"\n        group: \"{{ app_user }}\"\n        mode: '0644'\n        backup: yes\n      notify: restart application\n      tags: [deploy]\n    \n    - name: Generate application configuration\n      template:\n        src: application.properties.j2\n        dest: \"{{ app_home }}/config/application.properties\"\n        owner: \"{{ app_user }}\"\n        group: \"{{ app_user }}\"\n        mode: '0600'\n        backup: yes\n      notify: restart application\n      tags: [deploy, config]\n    \n    - name: Create systemd service file\n      template:\n        src: app.service.j2\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - reload systemd\n        - restart application\n      tags: [setup, service]\n    \n    - name: Start and enable application service\n      systemd:\n        name: \"{{ app_name }}\"\n        state: started\n        enabled: yes\n        daemon_reload: yes\n      tags: [service]\n    \n    - name: Wait for application to start\n      uri:\n        url: \"http://{{ inventory_hostname }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n      tags: [deploy, health-check]\n    \n    - name: Run application smoke tests\n      uri:\n        url: \"http://{{ inventory_hostname }}:{{ app_port }}/api/status\"\n        method: GET\n        return_content: yes\n      register: smoke_test\n      failed_when: \"'healthy' not in smoke_test.content\"\n      tags: [deploy, test]\n  \n  post_tasks:\n    - name: Add back to load balancer\n      uri:\n        url: \"http://{{ load_balancer_host }}/api/servers\"\n        method: POST\n        body_format: json\n        body:\n          host: \"{{ inventory_hostname }}\"\n          port: \"{{ app_port }}\"\n          weight: 1\n        status_code: [200, 201]\n      delegate_to: localhost\n      tags: [deploy]\n  \n  handlers:\n    - name: reload systemd\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n# Load Balancer Configuration\n- name: Configure Load Balancer\n  hosts: loadbalancer\n  become: yes\n  \n  vars:\n    nginx_upstream_servers: |\n      {% for host in groups['webservers'] %}\n      server {{ hostvars[host]['ansible_default_ipv4']['address'] }}:8080 weight=1 max_fails=3 fail_timeout=30s;\n      {% endfor %}\n  \n  tasks:\n    - name: Install Nginx\n      package:\n        name: nginx\n        state: present\n      tags: [setup]\n    \n    - name: Configure Nginx upstream\n      template:\n        src: nginx-upstream.conf.j2\n        dest: /etc/nginx/conf.d/upstream.conf\n        backup: yes\n      notify: reload nginx\n      tags: [config]\n    \n    - name: Configure Nginx virtual host\n      template:\n        src: nginx-vhost.conf.j2\n        dest: \"/etc/nginx/sites-available/{{ app_name }}\"\n        backup: yes\n      notify: reload nginx\n      tags: [config]\n    \n    - name: Enable virtual host\n      file:\n        src: \"/etc/nginx/sites-available/{{ app_name }}\"\n        dest: \"/etc/nginx/sites-enabled/{{ app_name }}\"\n        state: link\n      notify: reload nginx\n      tags: [config]\n    \n    - name: Remove default site\n      file:\n        path: /etc/nginx/sites-enabled/default\n        state: absent\n      notify: reload nginx\n      tags: [config]\n    \n    - name: Start and enable Nginx\n      systemd:\n        name: nginx\n        state: started\n        enabled: yes\n      tags: [service]\n    \n    - name: Test load balancer health\n      uri:\n        url: \"http://{{ inventory_hostname }}/health\"\n        method: GET\n        status_code: 200\n      retries: 5\n      delay: 10\n      tags: [test]\n  \n  handlers:\n    - name: reload nginx\n      systemd:\n        name: nginx\n        state: reloaded\n\n# Monitoring Setup\n- name: Setup Monitoring\n  hosts: monitoring\n  become: yes\n  \n  roles:\n    - role: prometheus.prometheus\n      vars:\n        prometheus_config_dir: /etc/prometheus\n        prometheus_db_dir: /var/lib/prometheus\n        prometheus_web_listen_address: \"0.0.0.0:9090\"\n        prometheus_storage_retention: \"30d\"\n        prometheus_scrape_configs:\n          - job_name: \"{{ app_name }}\"\n            static_configs:\n              - targets: |\n                  [\n                  {% for host in groups['webservers'] %}\n                  \"{{ hostvars[host]['ansible_default_ipv4']['address'] }}:8080\",\n                  {% endfor %}\n                  ]\n            metrics_path: /metrics\n            scrape_interval: 15s\n  \n  tasks:\n    - name: Configure Grafana dashboards\n      template:\n        src: \"{{ item }}.json.j2\"\n        dest: \"/var/lib/grafana/dashboards/{{ item }}.json\"\n      loop:\n        - application-metrics\n        - infrastructure-metrics\n      notify: restart grafana\n      tags: [monitoring]\n  \n  handlers:\n    - name: restart grafana\n      systemd:\n        name: grafana-server\n        state: restarted\n\n# Post-deployment verification\n- name: Post-deployment Verification\n  hosts: localhost\n  gather_facts: false\n  \n  tasks:\n    - name: Wait for application to be fully available\n      uri:\n        url: \"http://{{ load_balancer_host }}/api/version\"\n        method: GET\n        return_content: yes\n      register: version_check\n      retries: 10\n      delay: 30\n      tags: [verify]\n    \n    - name: Verify deployed version\n      assert:\n        that:\n          - version_check.json.version == app_version\n        fail_msg: \"Deployed version {{ version_check.json.version }} does not match expected {{ app_version }}\"\n      tags: [verify]\n    \n    - name: Run integration tests\n      uri:\n        url: \"http://{{ load_balancer_host }}/api/test/{{ item }}\"\n        method: POST\n        status_code: 200\n      loop:\n        - database-connectivity\n        - external-api-integration\n        - performance-baseline\n      tags: [integration-test]\n    \n    - name: Send deployment notification\n      mail:\n        to: \"{{ deployment_notification_email }}\"\n        subject: \"[{{ environment|upper }}] {{ app_name }} v{{ app_version }} deployed successfully\"\n        body: |\n          Deployment completed successfully:\n          \n          Application: {{ app_name }}\n          Version: {{ app_version }}\n          Environment: {{ environment }}\n          Load Balancer: http://{{ load_balancer_host }}\n          \n          Deployed to servers:\n          {% for host in groups['webservers'] %}\n          - {{ host }}\n          {% endfor %}\n      when: deployment_notification_email is defined\n      tags: [notification]",
      "language": "yaml",
      "scenario": "Production-ready multi-tier application deployment with rolling updates, health checks, and monitoring"
    },
    {
      "title": "Infrastructure as Code Playbook",
      "description": "Advanced playbook for provisioning and configuring complete infrastructure",
      "code": "---\n# infrastructure.yml - Complete Infrastructure Provisioning\n- name: Provision Infrastructure\n  hosts: localhost\n  gather_facts: false\n  vars:\n    project_name: \"myproject\"\n    environment: \"{{ env | default('dev') }}\"\n    region: \"{{ aws_region | default('us-west-2') }}\"\n    \n  tasks:\n    - name: Include environment variables\n      include_vars: \"environments/{{ environment }}.yml\"\n    \n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ project_name }}-{{ environment }}-vpc\"\n      register: vpc_info\n    \n    - name: Create VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ project_name }}-{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ region }}\"\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n        state: present\n      register: vpc\n      when: vpc_info.vpcs | length == 0\n    \n    - name: Create subnets\n      amazon.aws.ec2_vpc_subnet:\n        vpc_id: \"{{ vpc.vpc.id | default(vpc_info.vpcs[0].vpc_id) }}\"\n        cidr: \"{{ item.cidr }}\"\n        az: \"{{ item.az }}\"\n        tags:\n          Name: \"{{ project_name }}-{{ environment }}-{{ item.name }}\"\n          Environment: \"{{ environment }}\"\n          Type: \"{{ item.type }}\"\n        state: present\n      loop: \"{{ subnets }}\"\n      register: created_subnets\n    \n    - name: Create security groups\n      amazon.aws.ec2_group:\n        name: \"{{ item.name }}\"\n        description: \"{{ item.description }}\"\n        vpc_id: \"{{ vpc.vpc.id | default(vpc_info.vpcs[0].vpc_id) }}\"\n        rules: \"{{ item.rules }}\"\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n        state: present\n      loop: \"{{ security_groups }}\"\n      register: created_security_groups\n    \n    - name: Launch EC2 instances\n      amazon.aws.ec2_instance:\n        name: \"{{ project_name }}-{{ environment }}-{{ item.name }}\"\n        image_id: \"{{ item.ami_id }}\"\n        instance_type: \"{{ item.instance_type }}\"\n        key_name: \"{{ ssh_key_name }}\"\n        vpc_subnet_id: \"{{ created_subnets.results | selectattr('subnet.tags.Name', 'equalto', project_name + '-' + environment + '-' + item.subnet) | map(attribute='subnet.subnet_id') | first }}\"\n        security_groups: \"{{ item.security_groups }}\"\n        user_data: |\n          #!/bin/bash\n          apt-get update\n          apt-get install -y python3 python3-pip\n          pip3 install ansible\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n          Role: \"{{ item.role }}\"\n        exact_count: \"{{ item.count }}\"\n        count_tag:\n          Role: \"{{ item.role }}\"\n          Environment: \"{{ environment }}\"\n        state: present\n        wait: true\n        wait_timeout: 600\n      loop: \"{{ ec2_instances }}\"\n      register: created_instances\n    \n    - name: Create RDS subnet group\n      amazon.aws.rds_subnet_group:\n        name: \"{{ project_name }}-{{ environment }}-db-subnet-group\"\n        description: \"Database subnet group for {{ project_name }} {{ environment }}\"\n        subnets: |\n          [\n          {% for subnet in created_subnets.results %}\n          {% if subnet.subnet.tags.Type == 'private' %}\n          \"{{ subnet.subnet.subnet_id }}\",\n          {% endif %}\n          {% endfor %}\n          ]\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n        state: present\n      when: create_rds | default(false)\n    \n    - name: Create RDS instance\n      amazon.aws.rds_instance:\n        db_instance_identifier: \"{{ project_name }}-{{ environment }}-db\"\n        db_instance_class: \"{{ rds_instance_class }}\"\n        engine: mysql\n        engine_version: \"8.0\"\n        master_username: \"{{ rds_master_username }}\"\n        master_user_password: \"{{ rds_master_password }}\"\n        allocated_storage: \"{{ rds_storage_size }}\"\n        storage_type: gp2\n        storage_encrypted: true\n        vpc_security_group_ids:\n          - \"{{ created_security_groups.results | selectattr('group_name', 'equalto', 'database') | map(attribute='group_id') | first }}\"\n        db_subnet_group_name: \"{{ project_name }}-{{ environment }}-db-subnet-group\"\n        backup_retention_period: \"{{ rds_backup_retention }}\"\n        multi_az: \"{{ rds_multi_az }}\"\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n        state: present\n        wait: true\n        wait_timeout: 1200\n      when: create_rds | default(false)\n      no_log: true\n    \n    - name: Create Application Load Balancer\n      amazon.aws.elb_application_lb:\n        name: \"{{ project_name }}-{{ environment }}-alb\"\n        security_groups:\n          - \"{{ created_security_groups.results | selectattr('group_name', 'equalto', 'web') | map(attribute='group_id') | first }}\"\n        subnets: |\n          [\n          {% for subnet in created_subnets.results %}\n          {% if subnet.subnet.tags.Type == 'public' %}\n          \"{{ subnet.subnet.subnet_id }}\",\n          {% endif %}\n          {% endfor %}\n          ]\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n        state: present\n      register: alb\n      when: create_alb | default(false)\n    \n    - name: Create target group\n      amazon.aws.elb_target_group:\n        name: \"{{ project_name }}-{{ environment }}-tg\"\n        protocol: http\n        port: 80\n        vpc_id: \"{{ vpc.vpc.id | default(vpc_info.vpcs[0].vpc_id) }}\"\n        health_check_path: /health\n        health_check_interval: 30\n        health_check_timeout: 5\n        healthy_threshold_count: 2\n        unhealthy_threshold_count: 5\n        targets: |\n          [\n          {% for instance_group in created_instances.results %}\n          {% for instance in instance_group.instances %}\n          {\n            \"Id\": \"{{ instance.instance_id }}\",\n            \"Port\": 80\n          },\n          {% endfor %}\n          {% endfor %}\n          ]\n        tags:\n          Environment: \"{{ environment }}\"\n          Project: \"{{ project_name }}\"\n        state: present\n      when: create_alb | default(false)\n    \n    - name: Add inventory groups\n      add_host:\n        hostname: \"{{ item.1.public_ip_address }}\"\n        groups: \"{{ item.1.tags.Role }}\"\n        ansible_user: ubuntu\n        ansible_ssh_private_key_file: \"{{ ssh_private_key_path }}\"\n        instance_id: \"{{ item.1.instance_id }}\"\n      loop: \"{{ created_instances.results | subelements('instances') }}\"\n      when: item.1.state.name == 'running'\n    \n    - name: Wait for SSH connectivity\n      wait_for:\n        host: \"{{ item.1.public_ip_address }}\"\n        port: 22\n        delay: 60\n        timeout: 300\n      loop: \"{{ created_instances.results | subelements('instances') }}\"\n      when: item.1.state.name == 'running'\n\n# Configure base system on all instances\n- name: Configure Base System\n  hosts: all:!localhost\n  become: yes\n  gather_facts: yes\n  \n  vars:\n    timezone: \"UTC\"\n    ntp_servers:\n      - 0.pool.ntp.org\n      - 1.pool.ntp.org\n      - 2.pool.ntp.org\n    \n  tasks:\n    - name: Set timezone\n      timezone:\n        name: \"{{ timezone }}\"\n    \n    - name: Install base packages\n      apt:\n        name:\n          - htop\n          - curl\n          - wget\n          - git\n          - unzip\n          - jq\n          - awscli\n          - ntp\n          - fail2ban\n          - ufw\n        state: present\n        update_cache: yes\n    \n    - name: Configure NTP\n      template:\n        src: ntp.conf.j2\n        dest: /etc/ntp.conf\n        backup: yes\n      notify: restart ntp\n    \n    - name: Configure firewall rules\n      ufw:\n        rule: \"{{ item.rule }}\"\n        port: \"{{ item.port | default(omit) }}\"\n        proto: \"{{ item.proto | default(omit) }}\"\n        src: \"{{ item.src | default(omit) }}\"\n      loop:\n        - { rule: \"allow\", port: \"22\", proto: \"tcp\" }\n        - { rule: \"allow\", port: \"80\", proto: \"tcp\" }\n        - { rule: \"allow\", port: \"443\", proto: \"tcp\" }\n        - { rule: \"deny\", port: \"any\", proto: \"any\" }\n      notify: enable ufw\n    \n    - name: Configure fail2ban\n      template:\n        src: jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n    \n    - name: Create monitoring user\n      user:\n        name: monitoring\n        system: yes\n        shell: /bin/false\n        home: /var/lib/monitoring\n        createhome: yes\n    \n    - name: Install CloudWatch agent\n      get_url:\n        url: https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb\n        dest: /tmp/amazon-cloudwatch-agent.deb\n      register: cloudwatch_download\n    \n    - name: Install CloudWatch agent package\n      apt:\n        deb: /tmp/amazon-cloudwatch-agent.deb\n        state: present\n      when: cloudwatch_download is succeeded\n    \n    - name: Configure CloudWatch agent\n      template:\n        src: cloudwatch-config.json.j2\n        dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\n      notify: restart cloudwatch-agent\n  \n  handlers:\n    - name: restart ntp\n      service:\n        name: ntp\n        state: restarted\n    \n    - name: enable ufw\n      ufw:\n        state: enabled\n        policy: deny\n    \n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\n    \n    - name: restart cloudwatch-agent\n      service:\n        name: amazon-cloudwatch-agent\n        state: restarted\n        enabled: yes\n\n# Configure web servers\n- name: Configure Web Servers\n  hosts: webserver\n  become: yes\n  \n  roles:\n    - role: nginx\n      vars:\n        nginx_vhosts:\n          - listen: \"80\"\n            server_name: \"_\"\n            root: \"/var/www/html\"\n            index: \"index.html index.htm\"\n            access_log: \"/var/log/nginx/access.log\"\n            error_log: \"/var/log/nginx/error.log\"\n    \n    - role: nodejs\n      vars:\n        nodejs_version: \"16.x\"\n        nodejs_npm_global_packages:\n          - pm2\n  \n  tasks:\n    - name: Deploy application code\n      git:\n        repo: \"{{ app_repository }}\"\n        dest: /var/www/app\n        version: \"{{ app_version | default('HEAD') }}\"\n        force: yes\n      notify: restart application\n    \n    - name: Install application dependencies\n      npm:\n        path: /var/www/app\n        state: present\n      notify: restart application\n    \n    - name: Configure PM2 ecosystem\n      template:\n        src: ecosystem.config.js.j2\n        dest: /var/www/app/ecosystem.config.js\n      notify: restart application\n    \n    - name: Start application with PM2\n      command: pm2 start ecosystem.config.js\n      args:\n        chdir: /var/www/app\n      become_user: www-data\n      register: pm2_start\n      changed_when: \"'online' in pm2_start.stdout\"\n  \n  handlers:\n    - name: restart application\n      command: pm2 restart all\n      become_user: www-data\n\n# Configure database servers\n- name: Configure Database Servers\n  hosts: database\n  become: yes\n  \n  roles:\n    - role: mysql\n      vars:\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_bind_address: \"0.0.0.0\"\n        mysql_innodb_buffer_pool_size: \"{{ (ansible_memtotal_mb * 0.6) | int }}M\"\n        mysql_max_connections: 200\n  \n  tasks:\n    - name: Configure MySQL backup script\n      template:\n        src: mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n    \n    - name: Setup backup cron job\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh > /var/log/mysql-backup.log 2>&1\"\n        user: root\n\n# Final verification\n- name: Infrastructure Verification\n  hosts: localhost\n  gather_facts: false\n  \n  tasks:\n    - name: Verify web servers are responding\n      uri:\n        url: \"http://{{ item }}\"\n        method: GET\n        status_code: 200\n      loop: \"{{ groups['webserver'] }}\"\n      when: groups['webserver'] is defined\n    \n    - name: Generate infrastructure inventory\n      template:\n        src: infrastructure-inventory.txt.j2\n        dest: \"./{{ project_name }}-{{ environment }}-inventory.txt\"\n    \n    - name: Display deployment summary\n      debug:\n        msg: |\n          Infrastructure deployment completed successfully!\n          \n          Project: {{ project_name }}\n          Environment: {{ environment }}\n          Region: {{ region }}\n          \n          {% if groups['webserver'] is defined %}\n          Web Servers: {{ groups['webserver'] | join(', ') }}\n          {% endif %}\n          {% if groups['database'] is defined %}\n          Database Servers: {{ groups['database'] | join(', ') }}\n          {% endif %}\n          {% if alb is defined %}\n          Load Balancer: {{ alb.dns_name }}\n          {% endif %}",
      "language": "yaml",
      "scenario": "Complete infrastructure provisioning and configuration for multi-tier applications on AWS"
    }
  ],
  "troubleshooting": [
    {
      "problem": "Playbook execution fails with syntax errors",
      "solution": "Use ansible-playbook --syntax-check to validate YAML syntax before execution",
      "commands": ["ansible-playbook --syntax-check playbook.yml"],
      "details": "Common issues include incorrect indentation, missing colons, or invalid YAML structure"
    },
    {
      "problem": "Tasks fail intermittently due to timing issues",
      "solution": "Add wait_for tasks and proper retry logic with until loops",
      "commands": ["wait_for", "retries", "delay", "until"],
      "details": "Use wait_for module for ports/files and retries/until for command completion"
    },
    {
      "problem": "Variables not being passed correctly between plays",
      "solution": "Use set_fact, register, or hostvars to share data between plays and hosts",
      "commands": ["set_fact", "register", "hostvars['hostname']['variable']"],
      "details": "Variables are scoped to plays unless explicitly shared using these mechanisms"
    },
    {
      "problem": "Handlers not triggering when expected",
      "solution": "Ensure notify names match handler names exactly and handlers run at play end",
      "commands": ["meta: flush_handlers", "notify: handler_name"],
      "details": "Handlers only run once per play and only if notified by changed tasks"
    }
  ],
  "tags": ["automation", "orchestration", "yaml", "configuration", "deployment", "infrastructure"]
}
