{
  "id": "providers-resources",
  "toolId": "terraform",
  "name": "Providers & Resources",
  "description": "Understanding Terraform providers and resource management",
  "difficulty": "intermediate",
  "definitions": {
    "beginner": "Providers are plugins that let Terraform talk to different cloud services (like AWS, Azure), while resources are the actual things you create (like servers, databases).",
    "advanced": "Providers are Terraform plugins that implement resource types for specific infrastructure platforms, APIs, or services. Resources are the most important element in Terraform representing infrastructure objects with arguments, attributes, and lifecycle management."
  },
  "commands": [
    {
      "command": "terraform providers",
      "description": "Show provider requirements and configurations",
      "example": "terraform providers"
    },
    {
      "command": "terraform state list",
      "description": "List all resources in state",
      "example": "terraform state list"
    },
    {
      "command": "terraform state show",
      "description": "Show detailed resource information",
      "example": "terraform state show aws_instance.web"
    },
    {
      "command": "terraform import",
      "description": "Import existing infrastructure into Terraform",
      "example": "terraform import aws_instance.web i-1234567890abcdef0"
    },
    {
      "command": "terraform refresh",
      "description": "Update state with real infrastructure",
      "example": "terraform refresh"
    }
  ],
  "examples": [
    {
      "title": "Multi-Provider Configuration",
      "description": "Using multiple cloud providers in one configuration",
      "code": "# providers.tf\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# AWS S3 bucket\nresource \"aws_s3_bucket\" \"aws_storage\" {\n  bucket = \"my-aws-bucket\"\n}\n\n# Azure Storage Account\nresource \"azurerm_storage_account\" \"azure_storage\" {\n  name                     = \"myazurestorage\"\n  resource_group_name      = azurerm_resource_group.main.name\n  location                 = azurerm_resource_group.main.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}",
      "language": "hcl",
      "scenario": "Managing resources across multiple cloud providers"
    },
    {
      "title": "Resource Dependencies",
      "description": "Creating resources with explicit and implicit dependencies",
      "code": "# main.tf\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = \"main-vpc\"\n  }\n}\n\nresource \"aws_subnet\" \"public\" {\n  vpc_id                  = aws_vpc.main.id  # Implicit dependency\n  cidr_block              = \"10.0.1.0/24\"\n  availability_zone       = \"us-east-1a\"\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"public-subnet\"\n  }\n}\n\nresource \"aws_security_group\" \"web\" {\n  name_prefix = \"web-sg\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  depends_on = [aws_vpc.main]  # Explicit dependency\n}",
      "language": "hcl",
      "scenario": "Building interconnected infrastructure with proper dependencies"
    }
  ],
  "tags": ["providers", "resources", "dependencies", "state", "infrastructure"]
}
