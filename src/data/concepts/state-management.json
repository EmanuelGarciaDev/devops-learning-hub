{
  "id": "state-management",
  "toolId": "terraform",
  "name": "State Management",
  "description": "Understanding and managing Terraform state for infrastructure tracking",
  "difficulty": "intermediate",
  "definitions": {
    "beginner": "Terraform state is a file that keeps track of what infrastructure you've created, like a inventory list that helps Terraform know what already exists.",
    "advanced": "Terraform state is a JSON file that maps real-world resources to configuration, tracks metadata, and enables performance optimization through caching. Remote state backends provide collaboration, locking, and encryption capabilities."
  },
  "commands": [
    {
      "command": "terraform state list",
      "description": "List all resources in the state file",
      "example": "terraform state list"
    },
    {
      "command": "terraform state show",
      "description": "Show detailed information about a resource",
      "example": "terraform state show aws_instance.web"
    },
    {
      "command": "terraform state mv",
      "description": "Move/rename a resource in state",
      "example": "terraform state mv aws_instance.old aws_instance.new"
    },
    {
      "command": "terraform state rm",
      "description": "Remove a resource from state",
      "example": "terraform state rm aws_instance.web"
    },
    {
      "command": "terraform state pull",
      "description": "Download remote state",
      "example": "terraform state pull"
    },
    {
      "command": "terraform state push",
      "description": "Upload local state to remote backend",
      "example": "terraform state push terraform.tfstate"
    }
  ],
  "examples": [
    {
      "title": "Remote State with S3",
      "description": "Configure S3 backend for team collaboration",
      "code": "# backend.tf\nterraform {\n  backend \"s3\" {\n    bucket         = \"my-terraform-state-bucket\"\n    key            = \"prod/terraform.tfstate\"\n    region         = \"us-east-1\"\n    encrypt        = true\n    dynamodb_table = \"terraform-state-lock\"\n  }\n}\n\n# Create S3 bucket for state (run this first)\n# main.tf\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = \"my-terraform-state-bucket\"\n}\n\nresource \"aws_s3_bucket_versioning\" \"terraform_state\" {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"terraform_state\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      sse_algorithm = \"AES256\"\n    }\n  }\n}\n\nresource \"aws_dynamodb_table\" \"terraform_state_lock\" {\n  name           = \"terraform-state-lock\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n}",
      "language": "hcl",
      "scenario": "Setting up remote state backend for team collaboration"
    },
    {
      "title": "State Operations",
      "description": "Common state management operations",
      "code": "# List all resources\nterraform state list\n\n# Show specific resource\nterraform state show aws_instance.web\n\n# Import existing resource\nterraform import aws_instance.web i-1234567890abcdef0\n\n# Remove resource from state (without destroying)\nterraform state rm aws_instance.web\n\n# Move resource to new address\nterraform state mv aws_instance.old aws_instance.new\n\n# Refresh state with real infrastructure\nterraform refresh\n\n# Download remote state\nterraform state pull > current-state.json\n\n# Force unlock state (use carefully)\nterraform force-unlock LOCK_ID",
      "language": "bash",
      "scenario": "Managing and troubleshooting Terraform state"
    }
  ],
  "tags": ["state", "backend", "collaboration", "locking", "remote"]
}
